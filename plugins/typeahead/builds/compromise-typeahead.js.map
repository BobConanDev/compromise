{"version":3,"file":"compromise-typeahead.js","sources":["../src/tryPrefix.js","../src/getPrefixes.js","../src/index.js"],"sourcesContent":["const tryPrefix = function (doc, lex) {\n  let world = doc.world\n  // get end-part of text\n  let end = doc.last()\n  let m = end.terms().last()\n  let json = m.json({ terms: { normal: true } })[0].terms[0]\n  // if we've already put whitespace, end.\n  if (json.post) {\n    return\n  }\n  // if we found something\n  if (world.prefixes.hasOwnProperty(json.normal)) {\n    let found = world.prefixes[json.normal]\n    // add full-word as an implicit result\n    m.termList()[0].implicit = found\n    // tag it too?\n    if (lex.hasOwnProperty(found)) {\n      m.tag(lex[found], 'typeahead')\n    }\n  }\n}\nmodule.exports = tryPrefix\n","// generate all the possible prefixes up-front\nconst createIndex = function (arr, opts, world) {\n  let index = {}\n  let collisions = []\n\n  arr.forEach((str) => {\n    str = str.toLowerCase().trim()\n    let max = str.length\n    if (opts.max && max > opts.max) {\n      max = opts.max\n    }\n    let min = opts.min\n    for (let size = min; size < max; size += 1) {\n      let prefix = str.substr(0, size)\n      // ensure prefix is not a word\n      if (opts.safe && world.words.hasOwnProperty(prefix)) {\n        continue\n      }\n      if (index.hasOwnProperty(prefix) === true) {\n        collisions.push(prefix)\n      }\n      index[prefix] = str\n    }\n  })\n  // remove ambiguous-prefixes\n  collisions.forEach((str) => {\n    delete index[str]\n  })\n  return index\n}\nmodule.exports = createIndex\n","const tryPrefix = require('./tryPrefix')\nconst getPrefixes = require('./getPrefixes')\n\nconst isObject = function (obj) {\n  return obj && Object.prototype.toString.call(obj) === '[object Object]'\n}\n\nconst defaults = {\n  safe: true,\n  min: 3,\n}\n\nconst plugin = function (Doc, world, _nlp) {\n  /** add words that can be predicted from their prefix */\n  _nlp.typeahead = function (arr = [], opts = {}) {\n    let lex = {}\n    opts = Object.assign({}, defaults, opts)\n    // wiggle-out our params\n    if (isObject(arr)) {\n      lex = arr\n      arr = Object.keys(lex)\n    }\n    // pre-compute all prefixes\n    world.prefixes = getPrefixes(arr, opts, world)\n    // each keypress, try the end\n    world.postProcess((doc) => {\n      tryPrefix(doc, lex)\n    })\n  }\n  // alias\n  _nlp.typeAhead = Doc.prototype.typeahead\n}\nmodule.exports = plugin\n"],"names":["tryPrefix","doc","lex","world","end","last","m","terms","json","normal","post","prefixes","hasOwnProperty","found","termList","implicit","tag","createIndex","arr","opts","index","collisions","forEach","str","toLowerCase","trim","max","length","min","size","prefix","substr","safe","words","push","isObject","obj","Object","prototype","toString","call","defaults","plugin","Doc","_nlp","typeahead","assign","keys","getPrefixes","postProcess","typeAhead"],"mappings":"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"}