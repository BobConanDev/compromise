var t,e;t=this,e=function(t,e){function a(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var n=a(t),i=a(e);const r={second:!0,minute:!0,hour:!0,day:!0,week:!0,weekend:!0,month:!0,season:!0,quarter:!0,year:!0},s={wk:"week",min:"minute",sec:"second",weekend:"week"},o=function(t){let e=t.match("#Duration").text("normal");return e=e.replace(/s$/,""),s.hasOwnProperty(e)&&(e=s[e]),e},u={minute:!0},d={daybreak:"7:00am",breakfast:"8:00am",morning:"9:00am",noon:"12:00pm",midday:"12:00pm",afternoon:"2:00pm",lunchtime:"12:00pm",evening:"6:00pm",dinnertime:"6:00pm",night:"8:00pm",eod:"10:00pm",midnight:"12:00am"},m={quarter:15,half:30},l=function(t){let e=t.time("6:00am");return t.isBefore(e)?t.ampm("pm"):t},h=function(t,e){let a=t.match("(at|by|for|before|this|after)? #Time+");a=a.not("^(at|by|for|before|this|after)"),a=a.not("sharp"),a=a.not("on the dot");let i=n.default.now(e.timezone),r=i.clone(),s=a.text("reduced");if(d.hasOwnProperty(s))return{result:d[s],m:a};let o=a.match("^#Cardinal oclock (am|pm)?");if(o.found&&(i=i.hour(o.text("reduced")),i=i.startOf("hour"),i.isValid()&&!i.isEqual(r))){let t=o.match("(am|pm)");return i=t.found?i.ampm(t.text("reduced")):l(i),{result:i.time(),m:o}}if(o=a.match("(half|quarter|25|20|15|10|5) (past|after|to) #Cardinal"),o.found&&(i=function(t,e){let a=t.match("#Cardinal$"),n=t.not(a).match("(half|quarter|25|20|15|10|5)");a=a.text("reduced");let i=n.text("reduced");m.hasOwnProperty(i)&&(i=m[i]);let r=t.has("to");return e=(e=e.hour(a)).startOf("hour"),a<6&&(e=e.ampm("pm")),r?e.subtract(i,"minutes"):e.add(i,"minutes")}(o,i),i.isValid()&&!i.isEqual(r)))return i=l(i),{result:i.time(),m:o};if(o=a.match("[<min>(half|quarter|25|20|15|10|5)] (past|after)"),o.found){let t=o.groups("min").text("reduced"),a=n.default(e.today);if(m.hasOwnProperty(t)&&(t=m[t]),a=a.next("hour").startOf("hour").minute(t),a.isValid()&&!a.isEqual(r))return{result:a.time(),m:o}}if(o=a.match("[<min>(half|quarter|25|20|15|10|5)] to"),o.found){let t=o.groups("min").text("reduced"),a=n.default(e.today);if(m.hasOwnProperty(t)&&(t=m[t]),a=a.next("hour").startOf("hour").minus(t,"minutes"),a.isValid()&&!a.isEqual(r))return{result:a.time(),m:o}}if(o=a.match("[<time>#Time] (in|at) the? [<desc>(morning|evening|night|nighttime)]"),o.found){let t=o.groups("time").text("normal");if(/^[0-9]{1,2}$/.test(t)?(i=i.hour(t),i=i.startOf("hour")):i=i.time(t),i.isValid()&&!i.isEqual(r)){let t=o.groups("desc").text("reduced");return"evening"!==t&&"night"!==t||(i=i.ampm("pm")),{result:i.time(),m:o}}}if(o=a.match("this? [<desc>(morning|evening|tonight)] at [<time>(#Cardinal|#Time)]"),o.found){let t=o.groups(),e=t.time.text("reduced");if(/^[0-9]{1,2}$/.test(e)?(i=i.hour(e),i=i.startOf("hour")):i=i.time(e),i.isValid()&&!i.isEqual(r)){let e=t.desc.text("reduced");return"morning"===e&&(i=i.ampm("am")),"evening"!==e&&"tonight"!==e||(i=i.ampm("pm")),{result:i.time(),m:o}}}if(o=a.match("^#Cardinal$"),o.found){let t=o.text("reduced");if(i=i.hour(t),i=i.startOf("hour"),i.isValid()&&!i.isEqual(r))return!1===/(am|pm)/i.test(t)&&(i=l(i)),{result:i.time(),m:o}}let u=a.text("reduced");return i=i.time(u),i.isValid()&&!i.isEqual(r)?(!1===/(am|pm)/i.test(u)&&(i=l(i)),{result:i.time(),m:a}):e.dayStart?{result:e.dayStart,m:t.none()}:{result:null,m:t.none()}},c="Australia/",f="Pacific/",y={"british summer time":"Europe/London",bst:"Europe/London","british time":"Europe/London","britain time":"Europe/London","irish summer time":"Europe/Dublin","irish time":"Europe/Dublin",ireland:"Europe/Dublin","central european time":"Europe/Berlin",cet:"Europe/Berlin","central european summer time":"Europe/Berlin",cest:"Europe/Berlin","central europe":"Europe/Berlin","eastern european time":"Europe/Riga",eet:"Europe/Riga","eastern european summer time":"Europe/Riga",eest:"Europe/Riga","eastern europe time":"Europe/Riga","western european time":"Europe/Lisbon","western european summer time":"Europe/Lisbon","western europe":"Europe/Lisbon","turkey standard time":"Europe/Istanbul",trt:"Europe/Istanbul","turkish time":"Europe/Istanbul",etc:"Africa/Freetown",utc:"Africa/Freetown","greenwich standard time":"Africa/Freetown",gmt:"Africa/Freetown","east africa time":"Africa/Nairobi","east african time":"Africa/Nairobi","eastern africa time":"Africa/Nairobi","central africa time":"Africa/Khartoum","central african time":"Africa/Khartoum","south africa standard time":"Africa/Johannesburg",sast:"Africa/Johannesburg","southern africa":"Africa/Johannesburg","south african":"Africa/Johannesburg","west africa standard time":"Africa/Lagos","western africa time":"Africa/Lagos","west african time":"Africa/Lagos","australian central standard time":c+"Adelaide",acst:c+"Adelaide","australian central daylight time":c+"Adelaide",acdt:c+"Adelaide","australia central":c+"Adelaide","australian eastern standard time":c+"Brisbane",aest:c+"Brisbane","australian eastern daylight time":c+"Brisbane",aedt:c+"Brisbane","australia east":c+"Brisbane","australian western standard time":c+"Perth",awst:c+"Perth","australian western daylight time":c+"Perth",awdt:c+"Perth","australia west":c+"Perth","australian central western standard time":c+"Eucla",acwst:c+"Eucla","australia central west":c+"Eucla","lord howe standard time":c+"Lord_Howe",lhst:c+"Lord_Howe","lord howe daylight time":c+"Lord_Howe",lhdt:c+"Lord_Howe","russian standard time":"Europe/Moscow",msk:"Europe/Moscow",russian:"Europe/Moscow","central standard time":"America/Chicago","central time":"America/Chicago",cst:"America/Havana","central daylight time":"America/Chicago",cdt:"America/Havana","mountain standard time":"America/Denver","mountain time":"America/Denver",mst:"America/Denver","mountain daylight time":"America/Denver",mdt:"America/Denver","atlantic standard time":"America/Halifax","atlantic time":"America/Halifax",ast:"Asia/Baghdad","atlantic daylight time":"America/Halifax",adt:"America/Halifax","eastern standard time":"America/New_York","eastern time":"America/New_York",est:"America/New_York","eastern daylight time":"America/New_York",edt:"America/New_York","pacific time":"America/Los_Angeles","pacific standard time":"America/Los_Angeles",pst:"America/Los_Angeles","pacific daylight time":"America/Los_Angeles",pdt:"America/Los_Angeles","alaskan standard time":"America/Anchorage","alaskan time":"America/Anchorage",ahst:"America/Anchorage","alaskan daylight time":"America/Anchorage",ahdt:"America/Anchorage","hawaiian standard time":f+"Honolulu","hawaiian time":f+"Honolulu",hst:f+"Honolulu","aleutian time":f+"Honolulu","hawaii time":f+"Honolulu","newfoundland standard time":"America/St_Johns","newfoundland time":"America/St_Johns",nst:"America/St_Johns","newfoundland daylight time":"America/St_Johns",ndt:"America/St_Johns","brazil time":"America/Sao_Paulo",brt:"America/Sao_Paulo","bras√≠lia":"America/Sao_Paulo",brasilia:"America/Sao_Paulo","brazilian time":"America/Sao_Paulo","argentina time":"America/Buenos_Aires","argentinian time":"America/Buenos_Aires","amazon time":"America/Manaus",amt:"America/Manaus","amazonian time":"America/Manaus","easter island standard time":"Chile/Easterisland",east:"Chile/Easterisland","easter island summer time":"Chile/Easterisland",easst:"Chile/Easterisland","venezuelan standard time":"America/Caracas","venezuelan time":"America/Caracas",vet:"America/Caracas","venezuela time":"America/Caracas","paraguay time":"America/Asuncion",pyt:"America/Asuncion","paraguay summer time":"America/Asuncion",pyst:"America/Asuncion","cuba standard time":"America/Havana","cuba time":"America/Havana","cuba daylight time":"America/Havana","cuban time":"America/Havana","bolivia time":"America/La_Paz","bolivian time":"America/La_Paz","colombia time":"America/Bogota",cot:"America/Bogota","colombian time":"America/Bogota","acre time":"America/Eirunepe","peru time":"America/Lima","chile standard time":"America/Punta_Arenas","chile time":"America/Punta_Arenas",clst:"America/Punta_Arenas","chile summer time":"America/Punta_Arenas",cldt:"America/Punta_Arenas","uruguay time":"America/Montevideo",uyt:"America/Montevideo",ist:"Asia/Jerusalem","arabic standard time":"Asia/Baghdad","arabic time":"Asia/Baghdad","arab time":"Asia/Baghdad","iran standard time":"Asia/Tehran","iran time":"Asia/Tehran",irst:"Asia/Tehran","iran daylight time":"Asia/Tehran",irdt:"Asia/Tehran",iranian:"Asia/Tehran","pakistan standard time":"Asia/Karachi","pakistan time":"Asia/Karachi",pkt:"Asia/Karachi","india standard time":"Asia/Kolkata","indian time":"Asia/Kolkata","indochina time":"Asia/Bangkok",ict:"Asia/Bangkok","south east asia":"Asia/Bangkok","china standard time":"Asia/Shanghai",ct:"Asia/Shanghai","chinese time":"Asia/Shanghai","alma-ata time":"Asia/Almaty",almt:"Asia/Almaty","oral time":"Asia/Oral","orat time":"Asia/Oral","yakutsk time":"Asia/Yakutsk",yakt:"Asia/Yakutsk","gulf standard time":"Asia/Dubai","gulf time":"Asia/Dubai",gst:"Asia/Dubai",uae:"Asia/Dubai","hong kong time":"Asia/Hong_Kong",hkt:"Asia/Hong_Kong","western indonesian time":"Asia/Jakarta",wib:"Asia/Jakarta","indonesia time":"Asia/Jakarta","central indonesian time":"Asia/Makassar",wita:"Asia/Makassar","israel daylight time":"Asia/Jerusalem",idt:"Asia/Jerusalem","israel standard time":"Asia/Jerusalem","israel time":"Asia/Jerusalem",israeli:"Asia/Jerusalem","krasnoyarsk time":"Asia/Krasnoyarsk",krat:"Asia/Krasnoyarsk","malaysia time":"Asia/Kuala_Lumpur",myt:"Asia/Kuala_Lumpur","singapore time":"Asia/Singapore",sgt:"Asia/Singapore","korea standard time":"Asia/Seoul","korea time":"Asia/Seoul",kst:"Asia/Seoul","korean time":"Asia/Seoul","uzbekistan time":"Asia/Samarkand",uzt:"Asia/Samarkand","vladivostok time":"Asia/Vladivostok",vlat:"Asia/Vladivostok","maldives time":"Indian/Maldives",mvt:"Indian/Maldives","mauritius time":"Indian/Mauritius",mut:"Indian/Mauritius","marshall islands time":f+"Kwajalein",mht:f+"Kwajalein","samoa standard time":f+"Midway",sst:f+"Midway","somoan time":f+"Midway","chamorro standard time":f+"Guam",chst:f+"Guam","papua new guinea time":f+"Bougainville",pgt:f+"Bougainville"};let g=n.default().timezones,p=Object.keys(g).reduce((t,e)=>(t[e]=e,t),{});var D=Object.assign({},y,p);const A=/(\-?[0-9]+)h(rs)?/i,w=/(\-?[0-9]+)/,k=/utc([\-+]?[0-9]+)/i,b=/gmt([\-+]?[0-9]+)/i,x=function(t){return(t=Number(t))>-13&&t<13?"Etc/GMT"+(t=((t*=-1)>0?"+":"")+t):null},v=function(t){let e=t.match("#Timezone+");e=e.not("(in|for|by|near|at)");let a=e.text("reduced");if(D.hasOwnProperty(a))return{result:D[a],m:e};let n=function(t){let e=t.match(A);if(null!==e)return x(e[1]);if(e=t.match(k),null!==e)return x(e[1]);if(e=t.match(b),null!==e){let t=-1*Number(e[1]);return x(t)}return e=t.match(w),null!==e?x(e[1]):null}(a);return n?{result:n,m:e}:{result:null,m:t.none()}},V=function(t,e){let a=function(t){let e={},a=t.none(),n=t.match("#DateShift+");if(!1===n.found)return{res:e,m:a};if(n.match("#Cardinal #Duration").forEach(t=>{let a=t.match("#Cardinal").numbers().get()[0];if(a&&"number"==typeof a){let n=o(t);!0===r[n]&&(e[n]=a)}}),!0===n.has("(before|ago|hence|back)$")&&Object.keys(e).forEach(t=>e[t]*=-1),a=n.match("#Cardinal #Duration"),n=n.not(a),a=n.match("[<unit>#Duration] [<dir>(after|before)]"),a.found){let t=a.groups("unit").text("reduced"),n=a.groups("dir").text("reduced");"after"===n?e[t]=1:"before"===n&&(e[t]=-1)}if(a=n.match("half (a|an) [#Duration]",0),a.found){let t=o(a);e[t]=.5}return a=t.match("#DateShift+"),{result:e,m:a}}(t),n=a.result;a=function(t){let e=t.match("[<num>#Value] [<unit>#Duration+] (of|in)");if(e.found){let t=e.groups(),a=t.num.numbers().get()[0],n=t.unit.text("reduced"),i={unit:n,num:Number(a)||0};return u[n]||(i.num-=1),{result:i,m:e}}if(e=t.match("[<dir>(first|initial|last|final)] [<unit>#Duration+] (of|in)"),e.found){let t=e.groups(),a=t.dir.text("reduced"),n=t.unit.text("reduced");return"initial"===a&&(a="first"),"final"===a&&(a="last"),{result:{unit:n,dir:a},m:e}}return{result:null,m:t.none()}}(t=t.not(a.m));let i=a.result;t=t.not(a.m),a=v(t);let s=a.result;t=t.not(a.m),a=h(t,e);let d=a.result;a=function(t){let e=t.match("#WeekDay");return e.found&&!t.has("^#WeekDay$")?t.has("(this|next|last) (next|upcoming|coming|past)? #WeekDay")?{result:null,m:t.none()}:{result:e.text("reduced"),m:e}:{result:null,m:t.none()}}(t=t.not(a.m));let m=a.result;a=function(t){let e=t.match("[(start|beginning) of] .",0);return e.found?{result:"start",m:e}:(e=t.match("[end of] .",0),e.found?{result:"end",m:e}:(e=t.match("[(middle|midpoint|center) of] .",0),e.found?{result:"middle",m:e}:{result:null,m:e}))}(t=t.not(a.m));let l=a.result;return a=function(t){if(t.has("(next|last|this)$"))return{result:null,m:t.none()};let e=t.match("^this? (next|upcoming|coming)");return e.found?{result:"next",m:e}:(e=t.match("^this? (past)"),e.found?{result:"this-past",m:e}:(e=t.match("^this? (last|previous)"),e.found?{result:"last",m:e}:(e=t.match("^(this|current)"),e.found?{result:"this",m:e}:{result:null,m:t.none()})))}(t=t.not(a.m)),{shift:n,counter:i,tz:s,time:d,weekDay:m,section:l,rel:a.result,doc:t=function(t){return(t=(t=(t=(t=(t=(t=t.not("[^the] !#Value",0)).not("#Preposition$")).not("#Conjunction$")).not("sharp")).not("on the dot")).not("^on")).not("(next|last|this)$")}(t=t.not(a.m))}};class Unit{constructor(t,e,a){this.unit=e||"day",this.setTime=!1;let i={};(a=a||{}).today&&(i={date:a.today.date(),month:a.today.month(),year:a.today.year()});let r=n.default(t,a.timezone,{today:i});Object.defineProperty(this,"d",{enumerable:!1,writable:!0,value:r}),Object.defineProperty(this,"context",{enumerable:!1,writable:!0,value:a})}clone(){let t=new Unit(this.d,this.unit,this.context);return t.setTime=this.setTime,t}log(){return console.log("--"),this.d.log(),console.log("\n"),this}applyShift(t={}){return Object.keys(t).forEach(e=>{this.d=this.d.add(t[e],e),"hour"!==e&&"minute"!==e||(this.setTime=!0)}),this}applyTime(t){if(t){if(/^[0-9]{1,2}$/.test(t)?this.d=this.d.hour(t):this.d=this.d.time(t),!/[ap]m/.test(t)){let t=this.d.time("6:00am");this.d.isBefore(t)&&(this.d=this.d.ampm("pm"));let e=this.d.time("10:00pm");this.d.isAfter(e)&&(this.d=this.d.ampm("am"))}}else this.d=this.d.startOf("day");return this.setTime=!0,this}applyWeekDay(t){if(t){let e=this.d.epoch;this.d=this.d.day(t),this.d.epoch<e&&(this.d=this.d.add(1,"week"))}return this}applyRel(t){return"next"===t?this.next():"last"===t||"this-past"===t?this.last():this}applySection(t){return"start"===t?this.start():"end"===t?this.end():"middle"===t?this.middle():this}format(t){return this.d.format(t)}start(){return this.d=this.d.startOf(this.unit),this.context.dayStart&&(this.d=this.d.time(this.context.dayStart)),this}end(){if(this.d=this.d.endOf(this.unit),this.context.dayEnd){this.d=this.d.startOf("day");let t=this.d.time(this.context.dayEnd);if(t.isAfter(this.d))return this.d=t,this}return this}middle(){let t=this.d.diff(this.d.endOf(this.unit)),e=Math.round(t.minutes/2);return this.d=this.d.add(e,"minutes"),this}beforeEnd(){let t=this.d.startOf(this.unit).diff(this.d.endOf(this.unit)),e=Math.round(t.minutes/4);return this.d=this.d.endOf(this.unit),this.d=this.d.minus(e,"minutes"),this.context.dayStart&&(this.d=this.d.time(this.context.dayStart)),this}before(){return this.d=this.d.minus(1,this.unit),this.d=this.d.endOf(this.unit),this.context.dayEnd&&(this.d=this.d.time(this.context.dayEnd)),this}after(){return this.d=this.d.add(1,this.unit),this.d=this.d.startOf(this.unit),this}next(){return this.d=this.d.add(1,this.unit),this.d=this.d.startOf(this.unit),this}last(){return this.d=this.d.minus(1,this.unit),this.d=this.d.startOf(this.unit),this}}class Day extends Unit{constructor(t,e,a){super(t,e,a),this.unit="day",this.d.isValid()&&(this.d=this.d.startOf("day"))}middle(){return this.d=this.d.time("10am"),this}beforeEnd(){return this.d=this.d.time("2pm"),this}}class CalendarDate extends Day{constructor(t,e,a){super(t,e,a),this.unit="day",this.d.isValid()&&(this.d=this.d.startOf("day"))}next(){return this.d=this.d.add(1,"year"),this}last(){return this.d=this.d.minus(1,"year"),this}}class WeekDay extends Day{constructor(t,e,a){super(t,e,a),this.unit="day",this.isWeekDay=!0,"string"==typeof t?(this.d=n.default(a.today,a.timezone),this.d=this.d.day(t),this.d.isBefore(a.today)&&(this.d=this.d.add(7,"days"))):this.d=t,this.weekDay=this.d.dayName(),this.d.isValid()&&(this.d=this.d.startOf("day"))}next(){return this.d=this.d.add(7,"days"),this.d=this.d.day(this.weekDay),this}last(){return this.d=this.d.minus(7,"days"),this.d=this.d.day(this.weekDay),this}before(){return this.d=this.d.minus(1,"day"),this.d=this.d.endOf("day"),this.context.dayEnd&&(this.d=this.d.time(this.context.dayEnd)),this}applyRel(t){if("next"===t){let t=this.context.today.endOf("week").add(1,"week");return this.next(),this.d.isAfter(t)&&this.last(),this}if("this-past"===t)return this.last();if("last"===t){let t=this.context.today.startOf("week");return this.last(),!1===this.d.isBefore(t)&&this.last(),this}return this}}class Holiday extends CalendarDate{constructor(t,e,a){super(t,e,a),this.unit="day",this.d.isValid()&&(this.d=this.d.startOf("day"))}}class Hour extends Unit{constructor(t,e,a){super(t,e,a,!0),this.unit="hour",this.d.isValid()&&(this.d=this.d.startOf("hour"))}}class Minute extends Unit{constructor(t,e,a){super(t,e,a,!0),this.unit="minute",this.d.isValid()&&(this.d=this.d.startOf("minute"))}}class Moment extends Unit{constructor(t,e,a){super(t,e,a,!0),this.unit="millisecond"}}class Month extends Unit{constructor(t,e,a){super(t,e,a),this.unit="month",this.d.isValid()&&(this.d=this.d.startOf(this.unit))}next(){return this.d=this.d.add(1,"year"),this.d=this.d.startOf("month"),this}last(){return this.d=this.d.minus(1,"year"),this.d=this.d.startOf("month"),this}}class AnyQuarter extends Unit{constructor(t,e,a){super(t,e,a),this.unit="quarter",this.d.isValid()&&(this.d=this.d.startOf(this.unit))}last(){return this.d=this.d.minus(1,"quarter"),this.d=this.d.startOf(this.unit),this}}class Quarter extends Unit{constructor(t,e,a){super(t,e,a),this.unit="quarter",this.d.isValid()&&(this.d=this.d.startOf(this.unit))}next(){return this.d=this.d.add(1,"year"),this.d=this.d.startOf(this.unit),this}last(){return this.d=this.d.minus(1,"year"),this.d=this.d.startOf(this.unit),this}}class Season extends Unit{constructor(t,e,a){super(t,e,a),this.unit="season",this.d.isValid()&&(this.d=this.d.startOf(this.unit))}next(){return this.d=this.d.add(1,"year"),this.d=this.d.startOf(this.unit),this}last(){return this.d=this.d.minus(1,"year"),this.d=this.d.startOf(this.unit),this}}class Year extends Unit{constructor(t,e,a){super(t,e,a),this.unit="year",this.d.isValid()&&(this.d=this.d.startOf("year"))}}class Week extends Unit{constructor(t,e,a){super(t,e,a),this.unit="week",this.d.isValid()&&(this.d=this.d.startOf("week"))}clone(){return new Week(this.d,this.unit,this.context)}middle(){return this.d=this.d.add(2,"days"),this}beforeEnd(){return this.d=this.d.day("friday"),this}}class WeekEnd extends Unit{constructor(t,e,a){super(t,e,a),this.unit="week",this.d.isValid()&&(this.d=this.d.day("saturday"),this.d=this.d.startOf("day"))}start(){return this.d=this.d.day("saturday").startOf("day"),this}next(){return this.d=this.d.add(1,this.unit),this.d=this.d.startOf("weekend"),this}last(){return this.d=this.d.minus(1,this.unit),this.d=this.d.startOf("weekend"),this}}const M={today:t=>new Day(t.today,null,t),yesterday:t=>new Day(t.today.minus(1,"day"),null,t),tomorrow:t=>new Day(t.today.plus(1,"day"),null,t),eom:t=>{let e=t.today.endOf("month");return e=e.startOf("day"),new Day(e,null,t)},eoy:t=>{let e=t.today.endOf("year");return e=e.startOf("day"),new Day(e,null,t)},now:t=>new Moment(t.today,null,t)};M.tommorrow=M.tomorrow,M.tmrw=M.tomorrow,M.anytime=M.today,M.sometime=M.today;const T={day:Day,hour:Hour,evening:Hour,second:Moment,milliscond:Moment,instant:Moment,minute:Minute,week:Week,weekend:WeekEnd,month:class AnyMonth extends Unit{constructor(t,e,a){super(t,e,a),this.unit="month",this.d.isValid()&&(this.d=this.d.startOf(this.unit))}},quarter:AnyQuarter,year:Year,season:Season,yr:Year,qtr:AnyQuarter,wk:Week,sec:Moment,hr:Hour};let E=`^(${Object.keys(T).join("|")})$`;const O=function(t){return{date:t.today.date(),month:t.today.month(),year:t.today.year()}},C=function(t,e,a){let r=null;return r=r||function(t,e,a){let n=null;!1===t.found&&(null!==a.time&&(n=new Moment(e.today,null,e)),a.shift&&Object.keys(a.shift).length>0&&(n=a.shift.hour||a.shift.minute?new Moment(e.today,null,e):new Day(e.today,null,e)));let i=t.text("reduced");return!0===M.hasOwnProperty(i)?M[i](e):"next"===i&&a.shift&&Object.keys(a.shift).length>0?M.tomorrow(e):n}(t,e,a),r=r||function(t,e){let a=null,n=t.match("[<holiday>#Holiday+] [<year>#Year?]"),r=e.today.year();n.groups("year").found&&(r=Number(n.groups("year").text("reduced"))||r);let s=n.groups("holiday").text("reduced"),o=i.default(s,r,e.timezone);return null!==o&&(o.isBefore(e.today)&&r===e.today.year()&&(o=i.default(s,r+1,e.timezone)),a=new Holiday(o,null,e)),a}(t,e),r=r||function(t,e){let a=t.match(E);if(!0===a.found){let t=a.text("reduced");if(T.hasOwnProperty(t)){let a=T[t];return a?new a(null,t,e):null}}if(a=t.match("^#WeekDay$"),!0===a.found){let t=a.text("reduced");return new WeekDay(t,null,e)}return null}(t,e),r=r||function(t,e){let a=t.match("(spring|summer|winter|fall|autumn) [<year>#Year?]");if(a.found){let a=t.text("reduced"),i=n.default(a,e.timezone,{today:O(e)}),r=new Season(i,null,e);if(!0===r.d.isValid())return r}if(a=t.match("[<q>#FinancialQuarter] [<year>#Year?]"),a.found){let t=a.groups("q").text("reduced"),i=n.default(t,e.timezone,{today:O(e)});if(a.groups("year")){let t=Number(a.groups("year").text())||e.today.year();i=i.year(t)}let r=new Quarter(i,null,e);if(!0===r.d.isValid())return r}if(a=t.match("[<q>#Value] quarter (of|in)? [<year>#Year?]"),a.found){let t=a.groups("q").text("reduced"),i=n.default("q"+t,e.timezone,{today:O(e)});if(a.groups("year")){let t=Number(a.groups("year").text())||e.today.year();i=i.year(t)}let r=new Quarter(i,null,e);if(!0===r.d.isValid())return r}if(a=t.match("^#Year$"),a.found){let a=t.text("reduced"),i=n.default(null,e.timezone,{today:O(e)});i=i.year(a);let r=new Year(i,null,e);if(!0===r.d.isValid())return r}return null}(t,e),r=r||function(t,e){let a=e.today.year(),n=t.match("[<date>#Value] of? [<month>#Month] [<year>#Year]");if(n.found||(n=t.match("[<month>#Month] the? [<date>#Value] [<year>#Year]")),n.found){let t={month:n.groups("month").text("reduced"),date:n.groups("date").text("reduced"),year:n.groups("year").text()||a},i=new CalendarDate(t,null,e);if(!0===i.d.isValid())return i}if(n=t.match("[<month>#Month] of? [<year>#Year]"),n.found){let t={month:n.groups("month").text("reduced"),year:n.groups("year").text("reduced")||a},i=new Month(t,null,e);if(!0===i.d.isValid())return i}if(n=t.match("[<date>#Value] of? [<month>#Month]"),n.found||(n=t.match("[<month>#Month] the? [<date>#Value]")),n.found){let t={month:n.groups("month").text("reduced"),date:n.groups("date").text("reduced"),year:e.today.year()},a=new CalendarDate(t,null,e);if(a.d.month()<e.today.month()&&(t.year+=1,a=new CalendarDate(t,null,e)),!0===a.d.isValid())return a}if(t.has("#Month")){let a={month:t.match("#Month").text("reduced"),date:1,year:e.today.year()},n=new Month(a,null,e);if(n.d.month()<e.today.month()&&(a.year+=1,n=new Month(a,null,e)),!0===n.d.isValid())return n}if(n=t.match("#WeekDay [<date>#Value]"),n.found){let t={month:e.today.month(),date:n.groups("date").text("reduced"),year:e.today.year()},a=new CalendarDate(t,null,e);if(!0===a.d.isValid())return a}if(n=t.match("the [<date>#Value]"),n.found){let t={month:e.today.month(),date:n.groups("date").text("reduced"),year:e.today.year()},a=new CalendarDate(t,null,e);if(!0===a.d.isValid())return a.d.isBefore(e.today)&&(a.d=a.d.add(1,"month")),a}if(n=t.match("/[0-9]{4}-[0-9]{2}-[0-9]{2}t[0-9]{2}:/"),n.found){let a=t.text("reduced"),n=new Moment(a,null,e);if(!0===n.d.isValid())return n}let i=t.text("reduced");if(!i)return new Moment(e.today,null,e);let r=new Day(i,null,e);return!1===r.d.isValid()?null:r}(t,e),r},S={day:Day,week:Week,weekend:WeekEnd,month:Month,quarter:Quarter,season:Season,hour:Hour,minute:Minute},_=function(t,e,a){if(!t&&a.weekDay&&(t=new WeekDay(a.weekDay,null,e),a.weekDay=null),!t)return null;if(a.shift){let e=a.shift;t.applyShift(e),e.hour||e.minute?t=new Moment(t.d,null,t.context):(e.week||e.day||e.month)&&(t=new Day(t.d,null,t.context))}return a.weekDay&&"day"!==t.unit&&(t.applyWeekDay(a.weekDay),t=new WeekDay(t.d,null,t.context)),a.rel&&t.applyRel(a.rel),a.section&&t.applySection(a.section),a.time&&t.applyTime(a.time),a.counter&&a.counter.unit&&(t=function(t,e={}){let a=S[e.unit];if(!a)return t;let n=t.d;"first"===e.dir||0===e.num?(n=t.start().d,n=n.startOf(e.unit)):"last"===e.dir?(n=n.endOf(t.unit),n="weekend"===e.unit?n.day("saturday",!1):n.startOf(e.unit)):e.num&&("weekend"===e.unit&&(n=n.day("saturday",!0).add(1,"day")),n=n.add(e.num,e.unit));let i=new a(n,null,t.context);return!0===i.d.isValid()?i:t}(t,a.counter)),t},q="undefined"==typeof process?self.env||{}:process.env,z=function(t,e){let a=V(t,e);if(t=a.doc,(t=>{q.DEBUG_DATE&&(console.log(`\n==== '${t.doc.text()}' =====`),Object.keys(t).forEach(e=>{"doc"!==e&&t[e]&&console.log(e,t[e])}),t.doc.debug())})(a),a.tz){let t=(e=Object.assign({},e,{timezone:a.tz})).today.format("iso-short");e.today=e.today.goto(e.timezone).set(t)}let n=C(t,e,a);return n=_(n,e,a),n},$={mon:"monday",tue:"tuesday",tues:"wednesday",wed:"wednesday",thu:"thursday",fri:"friday",sat:"saturday",sun:"sunday",monday:"monday",tuesday:"tuesday",wednesday:"wednesday",thursday:"thursday",friday:"friday",saturday:"saturday",sunday:"sunday"},j=function(t){return t.match("(every|each)").found?"AND":t.match("(any|a)").found?"OR":null},H=function(t){let e=t.start,a=t.end;if(e.d.isAfter(a.d)){if(e.isWeekDay&&a.isWeekDay)return t.end.next(),t;let n=e;t.start=a,t.end=n}return t},P=function(t){let e=t.start,a=t.end;return e.d.isAfter(a.d)&&a.d.hour()<10&&(a.d=a.d.ampm("pm")),t},B=function(t,e){return t=t.applyShift(e.punt)},W=[].concat([{match:"[<from>#Time+] (to|until|upto|through|thru|and) [<to>#Time+ #Date+]",desc:"3pm to 4pm january 5th",parse:(t,e)=>{let a=t.groups("from"),n=t.groups("to"),i=z(n,e);if(i){let t=i.clone();if(t.applyTime(a.text("implicit")),t){let e={start:t,end:i,unit:"time"};return!1===/(am|pm)/.test(n)&&(e=P(e)),e=H(e),e}}return null}},{match:"[<main>#Date+] from [<a>#Time] (to|until|upto|through|thru|and) [<b>#Time+]",desc:"january from 3pm to 4pm",parse:(t,e)=>{let a=t.groups("main"),n=t.groups("a"),i=t.groups("b");if(a=z(a,e),a){a.applyTime(n.text("implicit"));let t=a.clone();if(t.applyTime(i.text("implicit")),t){let e={start:a,end:t,unit:"time"};return!1===/(am|pm)/.test(i.text())&&(e=P(e)),e=H(e),e}}return null}},{match:"[<from>#Date+] (to|until|upto|through|thru|and) [<to>#Time+]",desc:"january from 3pm to 4pm",parse:(t,e)=>{let a=t.groups("from"),n=t.groups("to");if(a=z(a,e),a){let t=a.clone();if(t.applyTime(n.text("implicit")),t){let e={start:a,end:t,unit:"time"};return!1===/(am|pm)/.test(n.text())&&(e=P(e)),e=H(e),e}}return null}}],[{match:"^during? #Month+ (or|and) #Month [<year>#Year]?",desc:"march or june",parse:(t,e)=>{let a=t.match("^during? [#Month]",0);t=t.not("(or|and)");let n=z(a,e);if(n){let i=[{start:n,end:n.clone().end(),unit:n.unit}],r=t.not(a);r.found&&r.match("#Month").forEach(t=>{let a=z(t,e);i.push({start:a,end:a.clone().end(),unit:a.unit})});let s=t.match("#Year$");return s.found&&(s=s.text("reduced"),i.forEach(t=>{t.start.d=t.start.d.year(s),t.end.d=t.end.d.year(s)})),i}return null}},{match:"^#Month #Value+ (or|and)? #Value$",desc:"jan 5 or 8",parse:(t,e)=>{let a=(t=t.not("(or|and)")).match("^#Month #Value"),n=z(a,e);if(n){let e=[{start:n,end:n.clone().end(),unit:n.unit}],i=t.not(a);return i.found&&i.match("#Value").forEach(t=>{let a=n.clone();a.d=a.d.date(t.text("reduced")),e.push({start:a,end:a.clone().end(),unit:a.unit})}),e}return null}},{match:"^#Month+ #Value #Value+$",desc:"jan 5 8",parse:(t,e)=>{let a=t.match("#Month"),n=t.match("#Year");t=t.not("#Year");let i=[];return t.match("#Value").forEach(t=>{let r=(t=t.clone()).prepend(a.text());n.found&&r.append(n);let s=z(r,e);s&&i.push({start:s,end:s.clone().end(),unit:s.unit})}),i}},{match:"^#Value+ (or|and)? #Value of #Month #Year?$",desc:"5 or 8 of Jan",parse:(t,e)=>{let a=t.match("#Month"),n=t.match("#Year");t=t.not("#Year");let i=[];return t.match("#Value").forEach(t=>{let r=t.append(a);n.found&&r.append(n);let s=z(r,e);s&&i.push({start:s,end:s.clone().end(),unit:s.unit})}),i}},{match:"^!(between|from|during)? [<from>#Date+] (and|or) [<to>#Date+]$",desc:"A or B",parse:(t,e)=>{let a=t.groups("from"),n=t.groups("to"),i=z(a,e),r=z(n,e);return i&&r?[{start:i,end:i.clone().end()},{start:r,end:r.clone().end()}]:null}}],[{match:"between [<start>.+] and [<end>.+]",desc:"between friday and sunday",parse:(t,e)=>{let a=t.groups("start");a=z(a,e);let n=t.groups("end");return n=z(n,e),a&&n?(n=n.before(),{start:a,end:n}):null}},{match:"[<from>#Month #Value] (to|through|thru) [<to>#Month #Value] [<year>#Year?]",desc:"june 5 to june 7",parse:(t,e)=>{let a=t.groups(),n=a.from;if(a.year&&(n=n.append(a.year)),n=z(n,e),n){let t=a.to;if(a.year&&(t=t.append(a.year)),t=z(t,e),t)return n.d.isAfter(t.d)&&(t.d=t.d.add(1,"year")),{start:n,end:t.end()}}return null}},{match:"[<month>#Month] [<from>#Value] (to|through|thru) [<to>#Value] of? [<year>#Year]",desc:"january 5 to 7 1998",parse:(t,e)=>{let{month:a,from:n,to:i,year:r}=t.groups(),s=r.clone(),o=n.prepend(a).append(r);if(o=z(o,e),o){let t=i.prepend(a).append(s);return t=z(t,e),{start:o,end:t.end()}}return null}},{match:"[<from>#Value] (to|through|thru) [<to>#Value of? #Month #Date+?]",desc:"5 to 7 of january 1998",parse:(t,e)=>{let a=t.groups("to");if(a=z(a,e),a){let e=t.groups("from"),n=a.clone();return n.d=n.d.date(e.text("implicit")),{start:n,end:a.end()}}return null}},{match:"[<from>#Month #Value] (to|through|thru) [<to>#Value]",desc:"january 5 to 7",parse:(t,e)=>{let a=t.groups("from");if(a=z(a,e),a){let e=t.groups("to"),n=a.clone();return n.d=n.d.date(e.text("implicit")),{start:a,end:n.end()}}return null}},{match:"from? [<from>#Month] (to|until|upto|through|thru) [<to>#Month] [<year>#Year]",desc:"january to may 2020",parse:(t,e)=>{let a=t.groups("from"),n=t.groups("year").numbers().get()[0],i=t.groups("to");if(a=z(a,e),i=z(i,e),a.d=a.d.year(n),i.d=i.d.year(n),a&&i){let t={start:a,end:i.end()};return t=H(t),t}return null}}],[{match:"from? [<from>.+] (to|until|upto|through|thru) [<to>.+]",desc:"from A to B",parse:(t,e)=>{let a=t.groups("from"),n=t.groups("to");if(a=z(a,e),n=z(n,e),a&&n){let t={start:a,end:n.end()};return t=H(t),t}return null}},{match:"^due? (by|before) [.+]",desc:"before june",parse:(t,e)=>{t=t.group(0);let a=z(t,e);if(a){let t=new Unit(e.today,null,e);return t.d.isAfter(a.d)&&(t=a.clone().applyShift({weeks:-2})),{start:t,end:a.clone().applyShift({day:-1}).end()}}return null}},{match:"^(on|in|at|@|during) [.+]",desc:"in june",parse:(t,e)=>{t=t.group(0);let a=z(t,e);return a?{start:a,end:a.clone().end(),unit:a.unit}:null}},{match:"^(after|following) [.+]",desc:"after june",parse:(t,e)=>{t=t.group(0);let a=z(t,e);return a?(a=a.after(),{start:a.clone(),end:B(a.clone(),e)}):null}},{match:"^(middle|center|midpoint) of [.+]",desc:"middle of",parse:(t,e)=>{t=t.group(0);let a=z(t,e),n=a.clone().middle(),i=a.beforeEnd();return a?{start:n,end:i}:null}},{match:".+ after #Time+$",desc:"tuesday after 5pm",parse:(t,e)=>{let a=z(t,e);return a?{start:a.clone(),end:a.end(),unit:"time"}:null}},{match:".+ before #Time+$",desc:"tuesday before noon",parse:(t,e)=>{let a=z(t,e);if(a){let t=a.clone(),e=a.start();if(a)return{start:e,end:t,unit:"time"}}return null}}]),N="undefined"==typeof process?self.env||{}:process.env,Y=function(t,e){let a={start:null,end:null};if(!t.found)return a;let n=z(t,e);if(n){let t=n.clone().end();a={start:n,end:t,unit:n.setTime?"time":n.unit}}return a},L=function(t,e){let a=function(t,e){let a=t.match("[<logic>(every|any|each)] [<skip>other?] [<unit>#Duration] (starting|beginning|commencing)?");if(a.found){let e={interval:{}},n=a.groups("unit").text("reduced");return e.interval[n]=1,e.choose=j(a),a.groups("skip").found&&(e.interval[n]=2),t=t.remove(a),{repeat:e}}if(a=t.match("[<logic>(every|any|each)] [<num>#Value] [<unit>#Duration] (starting|beginning|commencing)?"),a.found){let e={interval:{}},n=a.groups("unit");n.nouns().toSingular();let i=n.text("reduced");return e.interval[i]=a.groups("num").numbers().get()[0],e.choose=j(a),t=t.remove(a),{repeat:e}}if(a=t.match("[<logic>(every|any|each|a)] [<skip>other?] [<day>#WeekDay+] (starting|beginning|commencing)?"),a.found){let e={interval:{day:1},filter:{weekDays:{}}},n=a.groups("day").text("reduced");if(n=$[n],n)return e.filter.weekDays[n]=!0,e.choose=j(a),t=t.remove(a),{repeat:e}}if(a=t.match("[<logic>(every|any|each|a)] [<day>(weekday|week day|weekend|weekend day)] (starting|beginning|commencing)?"),a.found){let e={interval:{day:1},filter:{weekDays:{}}},n=a.groups("day");return n.has("(weekday|week day)")?e.filter.weekDays={monday:!0,tuesday:!0,wednesday:!0,thursday:!0,friday:!0}:n.has("(weekend|weekend day)")&&(e.filter.weekDays={saturday:!0,sunday:!0}),e.choose=j(a),t=t.remove(a),{repeat:e}}if(a=t.match("[<day>(mondays|tuesdays|wednesdays|thursdays|fridays|saturdays|sundays)] (at|near|after)? [<time>#Time+?]"),a.found){let n={interval:{day:1},filter:{weekDays:{}}},i=a.groups("day").text("reduced");if(i=i.replace(/s$/,""),i=$[i],i){n.filter.weekDays[i]=!0,n.choose="OR",t=t.remove(a);let r=a.groups("time");return r.found&&(n.time=h(r,e)),{repeat:n}}}return null}(t,e)||{},n=function(t,e){for(let i=0;i<W.length;i+=1){let r=W[i],s=t.match(r.match);if(s.found){n=`  ---[${r.desc}]---`,N.DEBUG_DATE&&console.log(`\n  [32m ${n} [0m`);let t=r.parse(s,e);if(null!==t)return a=t,"[object Array]"!==Object.prototype.toString.call(a)&&(t=[t]),t}}var a,n;return null}(t,e);return n||(n=[Y(t,e)]),n=n.map(t=>Object.assign({},a,t)),n.forEach(t=>{t.start&&t.end&&t.start.d.epoch>t.end.d.epoch&&(t.start=t.start.start())}),n},J=function(t,e){return!1===(e=e||{}).timezone&&(e.timezone="UTC"),e.today=e.today||n.default.now(e.timezone),e.today=n.default(e.today,e.timezone),t=function(t){return t.numbers||console.warn("\nCompromise warning: compromise/three must be used with compromise-dates plugin\n"),(t=t.clone()).numbers().toNumber(),t.contractions().expand(),t.replace("week end","weekend",!0).tag("Date"),t.replace("up to","upto",!0).tag("Date"),!1===t.has("once (a|an) #Duration")&&t.match("[(a|an)] #Duration",0).replaceWith("1",{tags:!0}).compute("lexicon"),t.match("@hasDash").insertAfter("to").tag("Date"),t}(t),L(t,e)},K=function(t){if(!t.start)return{start:null,end:null,timezone:null,duration:{}};let e=t.end?function(t){let e=t.end.d.add(1,"millisecond").since(t.start.d).diff;return delete e.milliseconds,delete e.seconds,e}(t):{};return{start:t.start.format("iso"),end:t.end?t.end.format("iso"):null,timezone:t.start.d.format("timezone"),duration:e}},R=function(t,e={}){let a=h(t,e);if(!a.result)return{time:null,"24h":null};let i=n.default.now().time(a.result);return{time:a.result,"24h":i.format("time-24"),hour:i.hour(),minute:i.minute()}},I=(t,e)=>"number"==typeof e?t.eq(e):t,U={century:!0,day:!0,decade:!0,hour:!0,millisecond:!0,minute:!0,month:!0,second:!0,weekend:!0,week:!0,year:!0,quarter:!0,season:!0};let F={m:"minute",h:"hour",hr:"hour",min:"minute",sec:"second","week end":"weekend",wk:"week",yr:"year",qtr:"quarter"};Object.keys(F).forEach(t=>{F[t+"s"]=F[t]});const Q=function(t){let e={},a=t.match("#Value+ #Duration");if(a.found)a.forEach(t=>{let a=t.numbers().get()[0],n=t.terms().last().nouns().toSingular().text("reduced");F.hasOwnProperty(n)&&(n=F[n]),U.hasOwnProperty(n)&&null!==a&&(e[n]=a)});else if(t.match("(#Duration && /[0-9][a-z]+$/)").found){let a=t.text(),n=a.match(/([0-9]+)/),i=a.match(/([a-z]+)/);n&&i&&(n=n[0]||null,i=i[0]||null,F.hasOwnProperty(i)&&(i=F[i]),U.hasOwnProperty(i)&&null!==n&&(e[i]=Number(n)))}return e},G={get:function(t){let e=[];return this.forEach(t=>{let a=Q(t);e.push(a)}),"number"==typeof t?e[t]:e},json(t={}){return this.map(e=>{let a=e.toView().json(t)[0]||{};return t&&!0!==t.times&&(a.duration=Q(e)),a},[])}},X="(in|by|before|during|on|until|after|of|within|all)",Z="(last|next|this|previous|current|upcoming|coming)",tt="(start|end|middle|starting|ending|midpoint|beginning)",et="(spring|summer|winter|fall|autumn)",at=(t,e)=>{!0===t.found&&t.forEach(t=>{let a=t.text("reduced"),n=parseInt(a,10);n&&n>1e3&&n<3e3&&t.tag("Year",e)})},nt=(t,e)=>{!0===t.found&&t.forEach(t=>{let a=t.text("reduced"),n=parseInt(a,10);n&&n>1900&&n<2030&&t.tag("Year",e)})},it="date-values",rt="date-tagger",st="section-tagger",ot="time-tagger",ut=function(t,e){t.found&&(t.tag("Date",e),t.numbers().lessThan(31).ifNo("#Year").tag("#Time",e))},dt="shift-tagger",mt=["act","aft","akst","anat","art","azot","azt","bnt","bot","bt","cast","cat","cct","chast","chut","ckt","cvt","cxt","davt","eat","ect","fjt","fkst","fnt","gamt","get","gft","gilt","gyt","hast","hncu","hneg","hnnomx","hnog","hnpm","hnpmx","hntn","hovt","iot","irkt","jst","kgt","kost","lint","magt","mart","mawt","mmt","nct","nft","novt","npt","nrt","nut","nzst","omst","pet","pett","phot","phst","pont","pwt","ret","sakt","samt","sbt","sct","sret","srt","syot","taht","tft","tjt","tkt","tlt","tmt","tot","tvt","ulat","vut","wakt","wat","wet","wft","wit","wst","yekt"].reduce((t,e)=>(t[e]=!0,t),{}),lt="fix-tagger";var ht={dates:function(t){var e;return function(t){t.match("in the (night|evening|morning|afternoon|day|daytime)").tag("Time","in-the-night"),t.match("(#Value|#Time) (am|pm)").tag("Time","value-ampm"),t.match("/^[0-9]{4}-[0-9]{2}$/").tag("Date","2012-06"),t.match("(tue|thu)").tag("WeekDay","misc-weekday"),t.match("(march|april|may) (and|to|or|through|until)? (march|april|may)").tag("Date").match("(march|april|may)").tag("Month","march|april|may");let e=t.if("#Month");!0===e.found&&(e.match("#Month #Date+").tag("Date","correction-numberRange"),e.match("#Value of #Month").tag("Date","value-of-month"),e.match("#Cardinal #Month").tag("Date","cardinal-month"),e.match("#Month #Value (and|or|to)? #Value+").tag("Date","value-to-value"),e.match("#Month the #Value").tag("Date","month-the-value"),e.match("(march|may) to? #Date").tag("Date").match("^.").tag("Month","march-to"),e.match("^(march|may)$").tag("Month","single-march"),e.match("#Month or #Month").tag("Date","month-or-month"));let a=t.if("#Value");if(!0===a.found){a.match("(#WeekDay|#Month) #Value").ifNo("#Money").tag("Date","date-value"),a.match("#Value (#WeekDay|#Month)").ifNo("#Money").tag("Date","value-date"),a.match("#TextValue #TextValue").if("#Date").tag("#Date","textvalue-date"),a.match("#Value (#WeekDay|#Duration) back").tag("#Date","3-back");let t=a.if("#Duration");!0===t.found&&(t.match("for #Value #Duration").tag("Date","for-x-duration"),t.match("#Value #Duration #Conjunction").tag("Date","val-duration-conjunction"),t.match(X+"? #Value #Duration").tag("Date","value-duration"),t.match("#Value #Duration old").unTag("Date","val-years-old"))}let n=t.if(et);!0===n.found&&(n.match(`${X}? ${Z} ${et}`).tag("Date","thisNext-season"),n.match(`the? ${tt} of ${et}`).tag("Date","section-season"),n.match(`${et} ${X}? #Cardinal`).tag("Date","season-year"));let i=t.if("#Date");!0===i.found&&(i.match("#Date the? #Ordinal").tag("Date","correction"),i.match(Z+" #Date").tag("Date","thisNext-date"),i.match("due? (by|before|after|until) #Date").tag("Date","by"),i.match("(last|next|this|previous|current|upcoming|coming|the) #Date").tag("Date","next-feb"),i.match(`the? ${tt} of #Date`).tag("Date","section-of"),i.match("#Ordinal #Duration in #Date").tag("Date","duration-in"),i.match("(early|late) (at|in)? the? #Date").tag("Time","early-evening"),i.match("#Date (by|before|after|at|@|about) #Cardinal").not("^#Date").tag("Time","date-before-Cardinal"),i.match("#Date [(am|pm)]",0).unTag("Verb").unTag("Copula").tag("Time","date-am"),i.match("#Date (#Preposition|to) #Date").ifNo("#Duration").tag("Date","date-prep-date"));let r=t.if("#Cardinal");if(!0===r.found){let t=r.match("#Date #Value [#Cardinal]",0);at(t,"date-value-year"),t=r.match("#Date [#Cardinal]",0),nt(t,"date-year"),t=r.match(tt+" of [#Cardinal]"),nt(t,"section-year"),t=r.match("#Month #Value [#Cardinal]",0),at(t,"month-value-year"),t=r.match("#Month #Value to #Value [#Cardinal]",0),at(t,"month-range-year"),t=r.match("(in|of|by|during|before|starting|ending|for|year|since) [#Cardinal]",0),at(t,"in-year-1"),t=r.match("(q1|q2|q3|q4) [#Cardinal]",0),at(t,"in-year-2"),t=r.match("#Ordinal quarter of? [#Cardinal]",0),at(t,"in-year-3"),t=r.match("the year [#Cardinal]",0),at(t,"in-year-4"),t=r.match("it (is|was) [#Cardinal]",0),nt(t,"in-year-5"),r.match(tt+" of #Year").tag("Date");let e=r.match("between [#Cardinal] and [#Cardinal]");at(e.groups("0"),"between-year-and-year-1"),at(e.groups("1"),"between-year-and-year-2")}let s=t.if("#Time");!0===s.found&&s.match("(by|before|after|at|@|about) #Time").tag("Time","preposition-time");let o=t.match("^/^20[012][0-9]$/$");nt(o,"2020-ish"),t.match("(in|after) /^[0-9]+(min|sec|wk)s?/").tag("Date","shift-units"),t.match("#Date [(now|night|sometime)]",0).tag("Time","date-now"),t.match("(from|starting|until|by) now").tag("Date","for-now"),t.match("(each|every) night").tag("Date","for-now")}(t),(e=t).has("#Value")&&(e.match("#Month #Value to #Value of? #Year?").tag("Date",it),e.match("#Value to #Value of? #Month #Year?").tag("Date",it),e.match("#Value #Duration of #Date").tag("Date",it),e.match("#Value+ #Duration (after|before|into|later|afterwards|ago)?").tag("Date",it),e.match("#Value #Date").tag("Date",it),e.match("#Date #Value").tag("Date",it),e.match("#Date #Preposition #Value").tag("Date",it),e.match("#Date (after|before|during|on|in) #Value").tag("Date",it),e.match("#Value (year|month|week|day) and a half").tag("Date",it),e.match("#Value and a half (years|months|weeks|days)").tag("Date",it),e.match("on the #Ordinal").tag("Date",it),e.match("#Month #Value+ (and|or) #Value").tag("Date","date-or-date"),e.match("#Value+ (and|or) #Value of #Month ").tag("Date","date-and-date")),function(t){t.match("(spring|summer|winter|fall|autumn|springtime|wintertime|summertime)").match("#Noun").tag("Season",rt),t.match("(q1|q2|q3|q4)").tag("FinancialQuarter",rt),t.match("(this|next|last|current) quarter").tag("FinancialQuarter",rt),t.match("(this|next|last|current) season").tag("Season",rt),t.has("#Date")&&(t.match("#Date #Preposition #Date").tag("Date",rt),t.match("(once|twice) (a|an|each) #Date").tag("Date",rt),t.match("#Date+").tag("Date",rt),t.match("(by|until|on|in|at|during|over|every|each|due) the? #Date").notIf("#PhrasalVerb").tag("Date","until-june"),t.match("a #Duration").tag("Date",rt),t.match("(between|from) #Date").tag("Date",rt),t.match("(to|until|upto) #Date").tag("Date",rt),t.match("#Date and #Date").tag("Date",rt),t.match("(by|until|after|before|during|on|in|following|since) (next|this|last)? (#Date|#Date)").notIf("#PhrasalVerb").tag("Date",rt),t.match("the? #Date after next one?").tag("Date",rt),t.match("(about|approx|approximately|around) #Date").tag("Date",rt))}(t),function(t){t.has("#Date")&&(t.match("this? (last|next|past|this|previous|current|upcoming|coming|the) #Date").tag("Date",st),t.match("(starting|beginning|ending) #Date").tag("Date",st),t.match("the? (start|end|middle|beginning) of (last|next|this|the) (#Date|#Date)").tag("Date",st),t.match("(the|this) #Date").tag("Date",st),t.match("#Date up to #Date").tag("Date",st))}(t),function(t){t.match("#Cardinal oclock").tag("Time",ot),t.match("/^[0-9]{2}h[0-9]{2}$/").tag("Time",ot),t.match("/^[0-9]{2}/[0-9]{2}/").tag("Date",ot).unTag("Value"),t.match("#Value (in|at) the? (morning|evening|night|nighttime)").tag("Time",ot),t.has("#Month")||(t.match("(5|10|15|20|five|ten|fifteen|quarter|twenty|half) (to|after|past) #Cardinal").tag("Time",ot),t.match("(at|by|before) (5|10|15|20|five|ten|fifteen|twenty|quarter|half) (after|past|to)").tag("Time","at-20-past"));let e=t.if("#Date");if(e.found){e.match("/^[0-9]{4}[:-][0-9]{2}[:-][0-9]{2}T[0-9]/").tag("Time",ot),e.match("#Date [at #Cardinal]",0).notIf("#Year").tag("Time",ot),e.match("half an (hour|minute|second)").tag("Date",ot),e.match("(in|for|by|near|at) #Timezone").tag("Timezone",ot),e.match("#Time to #Time").tag("Date",ot),e.match("#Time [(sharp|on the dot)]",0).tag("Time",ot);let a=e.if("#NumberRange");if(a.found){let t=a.match("[#NumberRange+] (on|by|at)? #WeekDay",0);ut(t,"3-4-tuesday"),t=a.match("[#NumberRange+] (on|by|at)? #Month #Value",0),ut(t,"3-4 mar 3"),t=a.match("[#NumberRange] to (#NumberRange && #Time)",0),ut(t,"3-4pm"),t=a.match("(#NumberRange && #Time) to [#NumberRange]",0),ut(t,"3pm-4")}let n=e.match("(from|between) #Cardinal and #Cardinal (in|on)? (#WeekDay|tomorrow|yesterday)");ut(n,"from 9-5 tues"),n=t.match("#Cardinal to #Cardinal (#WeekDay|tomorrow|yesterday)"),ut(n,"9-5 tues"),n=e.match("(from|between) [#NumericValue] (to|and) #Time",0).tag("Time","4-to-5pm"),ut(n,"from 9-5pm"),n=e.match("(#WeekDay|tomorrow|yesterday) (from|between)? (#Cardinal|#Time) (and|to) (#Cardinal|#Time)"),ut(n,"tues 3-5"),n=e.match("#Month #Value+ (from|between) [<time>(#Cardinal|#Time) (and|to) (#Cardinal|#Time)]").group("time"),ut(n,"sep 4 from 9-5"),n=e.match("#Time to #Cardinal on? #Date"),ut(n,"3pm-4 wed"),n=e.match("#Cardinal to #Time on? #Date"),ut(n,"3-4pm wed"),n=e.match("#Cardinal to #Cardinal on? (#WeekDay|#Month #Value)"),ut(n,"3-4 wed")}t.match("(at|around|near|#Date) [#Cardinal (thirty|fifteen) (am|pm)?]",0).tag("Time",ot),t.match("(anytime|sometime) (before|after|near) #Cardinal").tag("Date","antime-after-3").lastTerm().tag("Time")}(t),function(t){t.has("#Date")&&(t.match("#Cardinal #Duration (before|after|ago|from|hence|back)").tag("DateShift",dt),t.match("in #Cardinal #Duration").tag("DateShift",dt),t.match("in (a|an) #Duration").tag("DateShift",dt),t.match("[(a|an) #Duration from] #Date",0).tag("DateShift",dt),t.match("(a|an) #Duration ago").tag("DateShift",dt),t.match("in half (a|an) #Duration").tag("DateShift",dt),t.match("in a (few|couple) of? #Duration").tag("DateShift",dt),t.match("#Cardinal #Duration and? #DateShift").tag("DateShift",dt),t.match("#DateShift and #Cardinal #Duration").tag("DateShift",dt),t.match("[#Duration (after|before)] #Date",0).tag("DateShift",dt))}(t),function(t){t.match("#Month #Ordinal and #Ordinal").tag("Date","ord-and-ord"),t.match("every other #Duration").tag("Date","every-other"),t.match("(every|any|each|a) (day|weekday|week day|weekend|weekend day)").tag("Date","any-weekday"),t.match("(every|any|each|a) (#WeekDay)").tag("Date","any-wednesday"),t.match("(every|any|each|a) (#Duration)").tag("Date","any-week")}(t),function(t){let e=t.match("#Time [#Acronym]",0);if(e.found){let t=e.text("reduced");!0===mt[t]&&e.tag("Timezone","tz-abbr")}}(t),function(t){if(t.has("#Date")){let e=t.match("#Date+ by #Date+");e.found&&!e.has("^due")&&e.match("^#Date+").unTag("Date","by-monday"),t.match("[(wed|sat)] (#Month|#Year|on|between|during|from)",0).tag("WeekDay","wed");let a=t.match("#Date+");a.match("^day$").unTag("Date","spa-day"),a.match("(in|of|by|for)? (#Possessive && #Date)").unTag("Date","tomorrows meeting");let n="(yesterday|today|tomorrow)";a.has(n)&&(a.match(n+" [#Value]$").unTag("Date","yesterday-7"),a.match(`^[#Value] ${n}$`,0).unTag("Date","7 yesterday"),a.match(`#WeekDay+ ${n}$`).unTag("Date").lastTerm().tag("Date","fri-yesterday")),a.match("on #Cardinal$").unTag("Date","on 5"),a.match("this tomorrow").terms(0).unTag("Date","this-tomorrow"),a.match("(q1|q2|q3|q4) #Year").tag("Date",lt),a.match("^#Value (this|next|last)").terms(0).unTag("Date","4 next"),a.has("(last|this|next)")&&(a.match("(last|this|next) #Duration #Value").terms(2).unTag("Date","this month 7"),a.match("!#Month #Value (last|this|next) #Date").terms(0).unTag("Date","7 this month")),a.has("^between")&&!a.has("and .")&&a.unTag("Date",lt),a.match("(in|over) the #Duration #Date+?").unTag("Date","over-the-duration"),a.has("(minutes|seconds|weeks|hours|days|months)")&&!a.has("#Value #Duration")&&a.match("(minutes|seconds|weeks|hours|days|months)").unTag("Date","log-hours"),a.has("about #Holiday")&&a.match("about").unTag("#Date","about-thanksgiving"),a.match("#Ordinal quarter of? #Year").unTag("Fraction"),a.match("(from|by|before) now").unTag("Time"),a.match("#Date+").match("^the").unTag("Date")}}(t),t}};const ct="Australia/",ft="Pacific/",yt={"british summer time":"Europe/London",bst:"Europe/London","british time":"Europe/London","britain time":"Europe/London","irish summer time":"Europe/Dublin","irish time":"Europe/Dublin","central european time":"Europe/Berlin",cet:"Europe/Berlin","central european summer time":"Europe/Berlin",cest:"Europe/Berlin","central europe":"Europe/Berlin","eastern european time":"Europe/Riga",eet:"Europe/Riga","eastern european summer time":"Europe/Riga",eest:"Europe/Riga","eastern europe time":"Europe/Riga","western european time":"Europe/Lisbon","western european summer time":"Europe/Lisbon","turkey standard time":"Europe/Istanbul","turkish time":"Europe/Istanbul",utc:"Africa/Freetown","greenwich standard time":"Africa/Freetown",gmt:"Africa/Freetown","east africa time":"Africa/Nairobi","east african time":"Africa/Nairobi","eastern africa time":"Africa/Nairobi","central africa time":"Africa/Khartoum","central african time":"Africa/Khartoum","south africa standard time":"Africa/Johannesburg","west africa standard time":"Africa/Lagos","western africa time":"Africa/Lagos","west african time":"Africa/Lagos","australian central standard time":ct+"Adelaide",acst:ct+"Adelaide","australian central daylight time":ct+"Adelaide",acdt:ct+"Adelaide","australian eastern standard time":ct+"Brisbane",aest:ct+"Brisbane","australian eastern daylight time":ct+"Brisbane",aedt:ct+"Brisbane","australian western standard time":ct+"Perth",awst:ct+"Perth","australian western daylight time":ct+"Perth",awdt:ct+"Perth","australian central western standard time":ct+"Eucla",acwst:ct+"Eucla","lord howe standard time":ct+"Lord_Howe",lhst:ct+"Lord_Howe","lord howe daylight time":ct+"Lord_Howe",lhdt:ct+"Lord_Howe","russian standard time":"Europe/Moscow",msk:"Europe/Moscow","central standard time":"America/Chicago","central time":"America/Chicago",cst:"America/Havana","central daylight time":"America/Chicago",cdt:"America/Havana","mountain standard time":"America/Denver","mountain time":"America/Denver",mst:"America/Denver","mountain daylight time":"America/Denver",mdt:"America/Denver","atlantic standard time":"America/Halifax","atlantic time":"America/Halifax",ast:"Asia/Baghdad","atlantic daylight time":"America/Halifax",adt:"America/Halifax","eastern standard time":"America/New_York","eastern time":"America/New_York",est:"America/New_York","eastern daylight time":"America/New_York",edt:"America/New_York","pacific time":"America/Los_Angeles","pacific standard time":"America/Los_Angeles",pst:"America/Los_Angeles","pacific daylight time":"America/Los_Angeles",pdt:"America/Los_Angeles","alaskan standard time":"America/Anchorage","alaskan time":"America/Anchorage",ahst:"America/Anchorage","alaskan daylight time":"America/Anchorage",ahdt:"America/Anchorage","hawaiian standard time":ft+"Honolulu","hawaiian time":ft+"Honolulu",hst:ft+"Honolulu","aleutian time":ft+"Honolulu","hawaii time":ft+"Honolulu","newfoundland standard time":"America/St_Johns","newfoundland time":"America/St_Johns","newfoundland daylight time":"America/St_Johns","brazil time":"America/Sao_Paulo","brazilian time":"America/Sao_Paulo","argentina time":"America/Buenos_Aires","argentinian time":"America/Buenos_Aires","amazon time":"America/Manaus","amazonian time":"America/Manaus","easter island standard time":"Chile/Easterisland","easter island summer time":"Chile/Easterisland",easst:"Chile/Easterisland","venezuelan standard time":"America/Caracas","venezuelan time":"America/Caracas","venezuela time":"America/Caracas","paraguay time":"America/Asuncion","paraguay summer time":"America/Asuncion","cuba standard time":"America/Havana","cuba time":"America/Havana","cuba daylight time":"America/Havana","cuban time":"America/Havana","bolivia time":"America/La_Paz","bolivian time":"America/La_Paz","colombia time":"America/Bogota","colombian time":"America/Bogota","acre time":"America/Eirunepe","peru time":"America/Lima","chile standard time":"America/Punta_Arenas","chile time":"America/Punta_Arenas",clst:"America/Punta_Arenas","chile summer time":"America/Punta_Arenas",cldt:"America/Punta_Arenas","uruguay time":"America/Montevideo",uyt:"America/Montevideo","arabic standard time":"Asia/Baghdad","iran standard time":"Asia/Tehran","iran time":"Asia/Tehran","iran daylight time":"Asia/Tehran","pakistan standard time":"Asia/Karachi","pakistan time":"Asia/Karachi","india standard time":"Asia/Kolkata","indian time":"Asia/Kolkata","indochina time":"Asia/Bangkok","china standard time":"Asia/Shanghai","alma-ata time":"Asia/Almaty","oral time":"Asia/Oral","orat time":"Asia/Oral","yakutsk time":"Asia/Yakutsk",yakt:"Asia/Yakutsk","gulf standard time":"Asia/Dubai","gulf time":"Asia/Dubai","hong kong time":"Asia/Hong_Kong","western indonesian time":"Asia/Jakarta","indonesia time":"Asia/Jakarta","central indonesian time":"Asia/Makassar","israel daylight time":"Asia/Jerusalem","israel standard time":"Asia/Jerusalem","israel time":"Asia/Jerusalem","krasnoyarsk time":"Asia/Krasnoyarsk","malaysia time":"Asia/Kuala_Lumpur","singapore time":"Asia/Singapore","korea standard time":"Asia/Seoul","korea time":"Asia/Seoul",kst:"Asia/Seoul","korean time":"Asia/Seoul","uzbekistan time":"Asia/Samarkand","vladivostok time":"Asia/Vladivostok","maldives time":"Indian/Maldives","mauritius time":"Indian/Mauritius","marshall islands time":ft+"Kwajalein","samoa standard time":ft+"Midway","somoan time":ft+"Midway","chamorro standard time":ft+"Guam","papua new guinea time":ft+"Bougainville"};let gt=n.default().timezones,pt=Object.keys(gt).reduce((t,e)=>(t[e]=e,t),{});var Dt=Object.assign({},yt,pt);let At={"a couple":"Value",thur:"WeekDay",thurs:"WeekDay"};const wt=function(t,e){t.forEach(t=>{At[t]=e})};return wt(Object.keys(Dt),"#Timezone"),wt(["weekday","summer","winter","autumn","all day","eod","eom","eoy","standard time","daylight time","tommorrow"],"#Date"),wt(["centuries","century","day","days","decade","decades","hour","hours","hr","hrs","millisecond","milliseconds","minute","minutes","min","mins","month","months","seconds","sec","secs","week end","week ends","weekend","weekends","week","weeks","wk","wks","year","years","yr","yrs","quarter","qtr","qtrs","season","seasons"],"#Duration"),wt(["all hallows eve","all saints day","all sts day","april fools","armistice day","australia day","bastille day","boxing day","canada day","christmas eve","christmas","cinco de mayo","day of the dead","dia de muertos","dieciseis de septiembre","emancipation day","grito de dolores","groundhog day","halloween","harvey milk day","inauguration day","independence day","independents day","juneteenth","labour day","national freedom day","national nurses day","new years eve","new years","purple heart day","rememberance day","rosa parks day","saint andrews day","saint patricks day","saint stephens day","saint valentines day","st andrews day","st patricks day","st stephens day","st valentines day ","valentines day","valentines","veterans day","victoria day","womens equality day","xmas","epiphany","orthodox christmas day","orthodox new year","assumption of mary","all souls day","feast of the immaculate conception","feast of our lady of guadalupe","kwanzaa","imbolc","beltaine","lughnassadh","samhain","martin luther king day","mlk day","presidents day","mardi gras","tax day","commonwealth day","mothers day","memorial day","fathers day","columbus day","indigenous peoples day","canadian thanksgiving","election day","thanksgiving","t-day","turkey day","black friday","cyber monday","ash wednesday","palm sunday","maundy thursday","good friday","holy saturday","easter","easter sunday","easter monday","orthodox good friday","orthodox holy saturday","orthodox easter","orthodox easter monday","ascension day","pentecost","whitsunday","whit sunday","whit monday","trinity sunday","corpus christi","advent","tu bishvat","tu bshevat","purim","passover","yom hashoah","lag baomer","shavuot","tisha bav","rosh hashana","yom kippur","sukkot","shmini atzeret","simchat torah","chanukah","hanukkah","isra and miraj","lailat al-qadr","eid al-fitr","id al-Fitr","eid ul-Fitr","ramadan","eid al-adha","muharram","the prophets birthday","ostara","march equinox","vernal equinox","litha","june solistice","summer solistice","mabon","september equinox","fall equinox","autumnal equinox","yule","december solstice","winter solstice","chinese new year","diwali"],"#Holiday"),wt(["noon","midnight","morning","tonight","evening","afternoon","breakfast time","lunchtime","dinnertime","midday","eod","oclock","oclock","at night"],"#Time"),{tags:{FinancialQuarter:{is:"Date",not:["Fraction"]},Season:{is:"Date"},Year:{is:"Date",not:["RomanNumeral"]},Holiday:{is:"Date",also:"Noun"},DateShift:{is:"Date",not:["Timezone","Holiday"]}},words:At,compute:ht,api:function(t){!function(t){class Dates extends t{constructor(t,e,a,n={}){super(t,e,a),this.viewType="Nouns",this.opts=n}get(t){let e=[];return this.forEach(t=>{J(t,this.opts).forEach(t=>{e.push(K(t))})}),"number"==typeof t?e[t]:e}json(t={}){return this.map(e=>{let a=e.toView().json(t)[0]||{};if(t&&!0!==t.dates){let t=J(e,this.opts);a.dates=K(t[0])}return a},[])}format(t){let e=this.freeze().map(e=>{e.repair();let a=J(e,this.opts)[0]||{};if(a.start){let n=a.start.d,i=n.format(t);if(a.end){let e=a.end.d;!1===n.isSame(e,"day")&&(i+=" to "+e.format(t))}e.replaceWith(i)}return e});return new Dates(this.document,e.pointer,null,this.opts)}}t.prototype.dates=function(t){let e=function(t){let e=t.match("#Date+");e=e.filter(t=>{let e=t.has("^#Duration+$")||t.has("^#Value #Duration+$");return!(!0!==e||!t.has("(#FinancialQuarter|quarter)"))||!1===e});let a=e.match("[#Cardinal #Duration (in|on|this|next|during|for)] #Date",0);return a.found&&(e=e.not(a)),a=e.match("[#Cardinal #Duration] #WeekDay",0),a.found&&(e=e.not(a)),a=e.match("#Date [for #Value #Duration]$",0),a.found&&(e=e.not(a)),a=e.match("[#Cardinal #Duration] #Date",0),a.found&&!e.has("#Cardinal #Duration] (ago|from|before|after|back)")&&(e=e.not(a)),a=e.match("for #Cardinal #Duration"),a.found&&(e=e.not(a)),e=e.notIf("^one (#WeekDay|#Month)$"),e=function(t){let e=null;return t.has("^(between|within) #Date")?t:(t.has("#Month")&&(e=t.match("[#Month #Value] and? #Month",0).ifNo("@hasDash$"),e.found&&(t=t.splitAfter(e)),e=t.match("[#Value #Month] and? #Value #Month",0),e.found&&(t=t.splitAfter(e)),e=t.match("^[#Month] and? #Month #Ordinal?$",0),e.found&&(t=t.splitAfter(e)),e=t.match("[#Month #Value] #Month",0).ifNo("@hasDash$"),e.found&&(t=t.splitAfter(e))),t.has("#WeekDay")&&(e=t.match("^[#WeekDay] and? #WeekDay$",0).ifNo("@hasDash$"),e.found&&(t=t.splitAfter(e)),e=t.match("#WeekDay #WeekDay and? #WeekDay"),e.found&&(t=t.splitOn("#WeekDay")),e=t.match("[#WeekDay] (and|or|this|next)? #WeekDay",0).ifNo("@hasDash$"),e.found&&(t=t.splitAfter("#WeekDay"))),e=t.match("(this|next) #Duration [(today|tomorrow|yesterday)]",0),e.found&&(t=t.splitBefore(e)),e=t.match("[(today|tomorrow|yesterday)] #Value #Month",0),e.found&&(t=t.splitAfter(e)),e=t.match("[(today|tomorrow|yesterday)] (today|tomorrow|yesterday|#WeekDay)",0).ifNo("@hasDash$"),e.found&&(t=t.splitAfter(e)),t=t.not("^and"))}(e),e=e.notIf("(#Money|#Percentage)"),e=e.notIf("^per #Duration"),e}(this);return new Dates(this.document,e.pointer,null,t)}}(t),function(t){class Times extends t{constructor(t,e,a){super(t,e,a),this.viewType="Nouns"}get(t){return I(this,t).map(R)}json(t={}){return this.map(e=>{let a=e.toView().json(t)[0]||{};return t&&!0!==t.times&&(a.time=R(e)),a},[])}}t.prototype.times=function(t){let e=this.match("#Time+ (am|pm)?");return e=I(e,t),new Times(this.document,e.pointer)}}(t),function(t){class Durations extends t{constructor(t,e,a){super(t,e,a),this.context={}}}Object.assign(Durations.prototype,G),t.prototype.durations=function(t){let e=this.match("#Value+ #Duration (and? #Value+ #Duration)?");return e=e.concat(this.match("(#Duration && /[0-9][a-z]+$/)")),e=e.notIf("#DateShift"),"number"==typeof t&&(e=e.eq(t)),new Durations(this.document,e.pointer)}}(t)},hooks:["dates"]}},"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("spacetime"),require("spacetime-holiday")):"function"==typeof define&&define.amd?define(["spacetime","spacetime-holiday"],e):(t="undefined"!=typeof globalThis?globalThis:t||self).compromiseDates=e(t.spacetime,t.spacetimeHoliday);
