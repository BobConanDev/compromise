import t from"spacetime";import a from"spacetime-holiday";class Unit{constructor(a,e,i){this.unit=e||"day",this.setTime=!1;let n={};(i=i||{}).today&&(n={date:i.today.date(),month:i.today.month(),year:i.today.year()});let r=t(a,i.timezone,{today:n});Object.defineProperty(this,"d",{enumerable:!1,writable:!0,value:r}),Object.defineProperty(this,"context",{enumerable:!1,writable:!0,value:i})}clone(){let t=new Unit(this.d,this.unit,this.context);return t.setTime=this.setTime,t}log(){return console.log("--"),this.d.log(),console.log("\n"),this}applyShift(t={}){return Object.keys(t).forEach(a=>{this.d=this.d.add(t[a],a),"hour"!==a&&"minute"!==a||(this.setTime=!0)}),this}applyTime(t){if(t){if(/^[0-9]{1,2}$/.test(t)?this.d=this.d.hour(t):this.d=this.d.time(t),!/[ap]m/.test(t)){let t=this.d.time("6:00am");this.d.isBefore(t)&&(this.d=this.d.ampm("pm"));let a=this.d.time("10:00pm");this.d.isAfter(a)&&(this.d=this.d.ampm("am"))}}else this.d=this.d.startOf("day");return this.setTime=!0,this}applyWeekDay(t){if(t){let a=this.d.epoch;this.d=this.d.day(t),this.d.epoch<a&&(this.d=this.d.add(1,"week"))}return this}applyRel(t){return"next"===t?this.next():"last"===t||"this-past"===t?this.last():this}applySection(t){return"start"===t?this.start():"end"===t?this.end():"middle"===t?this.middle():this}format(t){return this.d.format(t)}start(){return this.d=this.d.startOf(this.unit),this.context.dayStart&&(this.d=this.d.time(this.context.dayStart)),this}end(){if(this.d=this.d.endOf(this.unit),this.context.dayEnd){this.d=this.d.startOf("day");let t=this.d.time(this.context.dayEnd);if(t.isAfter(this.d))return this.d=t,this}return this}middle(){let t=this.d.diff(this.d.endOf(this.unit)),a=Math.round(t.minutes/2);return this.d=this.d.add(a,"minutes"),this}beforeEnd(){let t=this.d.startOf(this.unit).diff(this.d.endOf(this.unit)),a=Math.round(t.minutes/4);return this.d=this.d.endOf(this.unit),this.d=this.d.minus(a,"minutes"),this.context.dayStart&&(this.d=this.d.time(this.context.dayStart)),this}before(){return this.d=this.d.minus(1,this.unit),this.d=this.d.endOf(this.unit),this.context.dayEnd&&(this.d=this.d.time(this.context.dayEnd)),this}after(){return this.d=this.d.add(1,this.unit),this.d=this.d.startOf(this.unit),this}next(){return this.d=this.d.add(1,this.unit),this.d=this.d.startOf(this.unit),this}last(){return this.d=this.d.minus(1,this.unit),this.d=this.d.startOf(this.unit),this}}class Day extends Unit{constructor(t,a,e){super(t,a,e),this.unit="day",this.d.isValid()&&(this.d=this.d.startOf("day"))}middle(){return this.d=this.d.time("10am"),this}beforeEnd(){return this.d=this.d.time("2pm"),this}}class CalendarDate extends Day{constructor(t,a,e){super(t,a,e),this.unit="day",this.d.isValid()&&(this.d=this.d.startOf("day"))}next(){return this.d=this.d.add(1,"year"),this}last(){return this.d=this.d.minus(1,"year"),this}}class WeekDay extends Day{constructor(a,e,i){super(a,e,i),this.unit="day",this.isWeekDay=!0,"string"==typeof a?(this.d=t(i.today,i.timezone),this.d=this.d.day(a),this.d.isBefore(i.today)&&(this.d=this.d.add(7,"days"))):this.d=a,this.weekDay=this.d.dayName(),this.d.isValid()&&(this.d=this.d.startOf("day"))}next(){return this.d=this.d.add(7,"days"),this.d=this.d.day(this.weekDay),this}last(){return this.d=this.d.minus(7,"days"),this.d=this.d.day(this.weekDay),this}before(){return this.d=this.d.minus(1,"day"),this.d=this.d.endOf("day"),this.context.dayEnd&&(this.d=this.d.time(this.context.dayEnd)),this}applyRel(t){if("next"===t){let t=this.context.today.endOf("week").add(1,"week");return this.next(),this.d.isAfter(t)&&this.last(),this}if("this-past"===t)return this.last();if("last"===t){let t=this.context.today.startOf("week");return this.last(),!1===this.d.isBefore(t)&&this.last(),this}return this}}class Holiday extends CalendarDate{constructor(t,a,e){super(t,a,e),this.unit="day",this.d.isValid()&&(this.d=this.d.startOf("day"))}}class Hour extends Unit{constructor(t,a,e){super(t,a,e,!0),this.unit="hour",this.d.isValid()&&(this.d=this.d.startOf("hour"))}}class Minute extends Unit{constructor(t,a,e){super(t,a,e,!0),this.unit="minute",this.d.isValid()&&(this.d=this.d.startOf("minute"))}}class Moment extends Unit{constructor(t,a,e){super(t,a,e,!0),this.unit="millisecond"}}class Month extends Unit{constructor(t,a,e){super(t,a,e),this.unit="month",this.d.isValid()&&(this.d=this.d.startOf(this.unit))}next(){return this.d=this.d.add(1,"year"),this.d=this.d.startOf("month"),this}last(){return this.d=this.d.minus(1,"year"),this.d=this.d.startOf("month"),this}}class AnyQuarter extends Unit{constructor(t,a,e){super(t,a,e),this.unit="quarter",this.d.isValid()&&(this.d=this.d.startOf(this.unit))}last(){return this.d=this.d.minus(1,"quarter"),this.d=this.d.startOf(this.unit),this}}class Quarter extends Unit{constructor(t,a,e){super(t,a,e),this.unit="quarter",this.d.isValid()&&(this.d=this.d.startOf(this.unit))}next(){return this.d=this.d.add(1,"year"),this.d=this.d.startOf(this.unit),this}last(){return this.d=this.d.minus(1,"year"),this.d=this.d.startOf(this.unit),this}}class Season extends Unit{constructor(t,a,e){super(t,a,e),this.unit="season",this.d.isValid()&&(this.d=this.d.startOf(this.unit))}next(){return this.d=this.d.add(1,"year"),this.d=this.d.startOf(this.unit),this}last(){return this.d=this.d.minus(1,"year"),this.d=this.d.startOf(this.unit),this}}class Year extends Unit{constructor(t,a,e){super(t,a,e),this.unit="year",this.d.isValid()&&(this.d=this.d.startOf("year"))}}class Week extends Unit{constructor(t,a,e){super(t,a,e),this.unit="week",this.d.isValid()&&(this.d=this.d.startOf("week"))}clone(){return new Week(this.d,this.unit,this.context)}middle(){return this.d=this.d.add(2,"days"),this}beforeEnd(){return this.d=this.d.day("friday"),this}}class WeekEnd extends Unit{constructor(t,a,e){super(t,a,e),this.unit="week",this.d.isValid()&&(this.d=this.d.day("saturday"),this.d=this.d.startOf("day"))}start(){return this.d=this.d.day("saturday").startOf("day"),this}next(){return this.d=this.d.add(1,this.unit),this.d=this.d.startOf("weekend"),this}last(){return this.d=this.d.minus(1,this.unit),this.d=this.d.startOf("weekend"),this}}const e={second:!0,minute:!0,hour:!0,day:!0,week:!0,weekend:!0,month:!0,season:!0,quarter:!0,year:!0},i={wk:"week",min:"minute",sec:"second",weekend:"week"},n=function(t){let a=t.match("#Duration").text("normal");return a=a.replace(/s$/,""),i.hasOwnProperty(a)&&(a=i[a]),a},r={minute:!0},s={daybreak:"7:00am",breakfast:"8:00am",morning:"9:00am",noon:"12:00pm",midday:"12:00pm",afternoon:"2:00pm",lunchtime:"12:00pm",evening:"6:00pm",dinnertime:"6:00pm",night:"8:00pm",eod:"10:00pm",midnight:"12:00am"},o={quarter:15,half:30},d=function(t){let a=t.time("6:00am");return t.isBefore(a)?t.ampm("pm"):t},u=function(a,e){let i=a.match("(at|by|for|before|this|after)? #Time+");i.found&&(a.remove(i),a.remove("^sharp"),a.remove("^on"),a.remove("on the dot")),i=i.not("^(at|by|for|before|this|after)"),i=i.not("sharp"),i=i.not("on the dot");let n=t.now(e.timezone),r=n.clone(),u=i.text("reduced");if(s.hasOwnProperty(u))return s[u];let h=i.match("^#Cardinal oclock (am|pm)?");if(h.found&&(h=h.not("oclock"),n=n.hour(h.text("reduced")),n=n.startOf("hour"),n.isValid()&&!n.isEqual(r))){let t=h.match("(am|pm)");return n=t.found?n.ampm(t.text("reduced")):d(n),n.time()}if(h=i.match("(half|quarter|25|20|15|10|5) (past|after|to) #Cardinal"),h.found&&(n=function(t,a){let e=t.match("#Cardinal$"),i=t.not(e).match("(half|quarter|25|20|15|10|5)");e=e.text("reduced");let n=i.text("reduced");o.hasOwnProperty(n)&&(n=o[n]);let r=t.has("to");return a=(a=a.hour(e)).startOf("hour"),e<6&&(a=a.ampm("pm")),r?a.subtract(n,"minutes"):a.add(n,"minutes")}(h,n),n.isValid()&&!n.isEqual(r)))return n=d(n),n.time();if(h=i.match("[<min>(half|quarter|25|20|15|10|5)] (past|after)"),h.found){let a=h.groups("min").text("reduced"),i=t(e.today);if(o.hasOwnProperty(a)&&(a=o[a]),i=i.next("hour").startOf("hour").minute(a),i.isValid()&&!i.isEqual(r))return i.time()}if(h=i.match("[<min>(half|quarter|25|20|15|10|5)] to"),h.found){let a=h.groups("min").text("reduced"),i=t(e.today);if(o.hasOwnProperty(a)&&(a=o[a]),i=i.next("hour").startOf("hour").minus(a,"minutes"),i.isValid()&&!i.isEqual(r))return i.time()}if(h=i.match("[<time>#Time] (in|at) the? [<desc>(morning|evening|night|nighttime)]"),h.found){let t=h.groups("time").text("reduced");if(/^[0-9]{1,2}$/.test(t)?(n=n.hour(t),n=n.startOf("hour")):n=n.time(t),n.isValid()&&!n.isEqual(r)){let t=h.groups("desc").text("reduced");return"evening"!==t&&"night"!==t||(n=n.ampm("pm")),n.time()}}if(h=i.match("this? [<desc>(morning|evening|tonight)] at [<time>(#Cardinal|#Time)]"),h.found){let t=h.groups(),a=t.time.text("reduced");if(/^[0-9]{1,2}$/.test(a)?(n=n.hour(a),n=n.startOf("hour")):n=n.time(a),n.isValid()&&!n.isEqual(r)){let a=t.desc.text("reduced");return"morning"===a&&(n=n.ampm("am")),"evening"!==a&&"tonight"!==a||(n=n.ampm("pm")),n.time()}}if(h=i.match("^#Cardinal$"),h.found){let t=h.text("reduced");if(n=n.hour(t),n=n.startOf("hour"),n.isValid()&&!n.isEqual(r))return!1===/(am|pm)/i.test(t)&&(n=d(n)),n.time()}let m=i.text("reduced");return n=n.time(m),n.isValid()&&!n.isEqual(r)?(!1===/(am|pm)/i.test(m)&&(n=d(n)),n.time()):e.dayStart?e.dayStart:null},h="Australia/",m="Pacific/",l={"british summer time":"Europe/London",bst:"Europe/London","british time":"Europe/London","britain time":"Europe/London","irish summer time":"Europe/Dublin","irish time":"Europe/Dublin",ireland:"Europe/Dublin","central european time":"Europe/Berlin",cet:"Europe/Berlin","central european summer time":"Europe/Berlin",cest:"Europe/Berlin","central europe":"Europe/Berlin","eastern european time":"Europe/Riga",eet:"Europe/Riga","eastern european summer time":"Europe/Riga",eest:"Europe/Riga","eastern europe time":"Europe/Riga","western european time":"Europe/Lisbon","western european summer time":"Europe/Lisbon","western europe":"Europe/Lisbon","turkey standard time":"Europe/Istanbul",trt:"Europe/Istanbul","turkish time":"Europe/Istanbul",etc:"Africa/Freetown",utc:"Africa/Freetown","greenwich standard time":"Africa/Freetown",gmt:"Africa/Freetown","east africa time":"Africa/Nairobi","east african time":"Africa/Nairobi","eastern africa time":"Africa/Nairobi","central africa time":"Africa/Khartoum","central african time":"Africa/Khartoum","south africa standard time":"Africa/Johannesburg",sast:"Africa/Johannesburg","southern africa":"Africa/Johannesburg","south african":"Africa/Johannesburg","west africa standard time":"Africa/Lagos","western africa time":"Africa/Lagos","west african time":"Africa/Lagos","australian central standard time":h+"Adelaide",acst:h+"Adelaide","australian central daylight time":h+"Adelaide",acdt:h+"Adelaide","australia central":h+"Adelaide","australian eastern standard time":h+"Brisbane",aest:h+"Brisbane","australian eastern daylight time":h+"Brisbane",aedt:h+"Brisbane","australia east":h+"Brisbane","australian western standard time":h+"Perth",awst:h+"Perth","australian western daylight time":h+"Perth",awdt:h+"Perth","australia west":h+"Perth","australian central western standard time":h+"Eucla",acwst:h+"Eucla","australia central west":h+"Eucla","lord howe standard time":h+"Lord_Howe",lhst:h+"Lord_Howe","lord howe daylight time":h+"Lord_Howe",lhdt:h+"Lord_Howe","russian standard time":"Europe/Moscow",msk:"Europe/Moscow",russian:"Europe/Moscow","central standard time":"America/Chicago","central time":"America/Chicago",cst:"America/Havana","central daylight time":"America/Chicago",cdt:"America/Havana","mountain standard time":"America/Denver","mountain time":"America/Denver",mst:"America/Denver","mountain daylight time":"America/Denver",mdt:"America/Denver","atlantic standard time":"America/Halifax","atlantic time":"America/Halifax",ast:"Asia/Baghdad","atlantic daylight time":"America/Halifax",adt:"America/Halifax","eastern standard time":"America/New_York","eastern time":"America/New_York",est:"America/New_York","eastern daylight time":"America/New_York",edt:"America/New_York","pacific time":"America/Los_Angeles","pacific standard time":"America/Los_Angeles",pst:"America/Los_Angeles","pacific daylight time":"America/Los_Angeles",pdt:"America/Los_Angeles","alaskan standard time":"America/Anchorage","alaskan time":"America/Anchorage",ahst:"America/Anchorage","alaskan daylight time":"America/Anchorage",ahdt:"America/Anchorage","hawaiian standard time":m+"Honolulu","hawaiian time":m+"Honolulu",hst:m+"Honolulu","aleutian time":m+"Honolulu","hawaii time":m+"Honolulu","newfoundland standard time":"America/St_Johns","newfoundland time":"America/St_Johns",nst:"America/St_Johns","newfoundland daylight time":"America/St_Johns",ndt:"America/St_Johns","brazil time":"America/Sao_Paulo",brt:"America/Sao_Paulo","brasília":"America/Sao_Paulo",brasilia:"America/Sao_Paulo","brazilian time":"America/Sao_Paulo","argentina time":"America/Buenos_Aires","argentinian time":"America/Buenos_Aires","amazon time":"America/Manaus",amt:"America/Manaus","amazonian time":"America/Manaus","easter island standard time":"Chile/Easterisland",east:"Chile/Easterisland","easter island summer time":"Chile/Easterisland",easst:"Chile/Easterisland","venezuelan standard time":"America/Caracas","venezuelan time":"America/Caracas",vet:"America/Caracas","venezuela time":"America/Caracas","paraguay time":"America/Asuncion",pyt:"America/Asuncion","paraguay summer time":"America/Asuncion",pyst:"America/Asuncion","cuba standard time":"America/Havana","cuba time":"America/Havana","cuba daylight time":"America/Havana","cuban time":"America/Havana","bolivia time":"America/La_Paz","bolivian time":"America/La_Paz","colombia time":"America/Bogota",cot:"America/Bogota","colombian time":"America/Bogota","acre time":"America/Eirunepe","peru time":"America/Lima","chile standard time":"America/Punta_Arenas","chile time":"America/Punta_Arenas",clst:"America/Punta_Arenas","chile summer time":"America/Punta_Arenas",cldt:"America/Punta_Arenas","uruguay time":"America/Montevideo",uyt:"America/Montevideo",ist:"Asia/Jerusalem","arabic standard time":"Asia/Baghdad","arabic time":"Asia/Baghdad","arab time":"Asia/Baghdad","iran standard time":"Asia/Tehran","iran time":"Asia/Tehran",irst:"Asia/Tehran","iran daylight time":"Asia/Tehran",irdt:"Asia/Tehran",iranian:"Asia/Tehran","pakistan standard time":"Asia/Karachi","pakistan time":"Asia/Karachi",pkt:"Asia/Karachi","india standard time":"Asia/Kolkata","indian time":"Asia/Kolkata","indochina time":"Asia/Bangkok",ict:"Asia/Bangkok","south east asia":"Asia/Bangkok","china standard time":"Asia/Shanghai",ct:"Asia/Shanghai","chinese time":"Asia/Shanghai","alma-ata time":"Asia/Almaty",almt:"Asia/Almaty","oral time":"Asia/Oral","orat time":"Asia/Oral","yakutsk time":"Asia/Yakutsk",yakt:"Asia/Yakutsk","gulf standard time":"Asia/Dubai","gulf time":"Asia/Dubai",gst:"Asia/Dubai",uae:"Asia/Dubai","hong kong time":"Asia/Hong_Kong",hkt:"Asia/Hong_Kong","western indonesian time":"Asia/Jakarta",wib:"Asia/Jakarta","indonesia time":"Asia/Jakarta","central indonesian time":"Asia/Makassar",wita:"Asia/Makassar","israel daylight time":"Asia/Jerusalem",idt:"Asia/Jerusalem","israel standard time":"Asia/Jerusalem","israel time":"Asia/Jerusalem",israeli:"Asia/Jerusalem","krasnoyarsk time":"Asia/Krasnoyarsk",krat:"Asia/Krasnoyarsk","malaysia time":"Asia/Kuala_Lumpur",myt:"Asia/Kuala_Lumpur","singapore time":"Asia/Singapore",sgt:"Asia/Singapore","korea standard time":"Asia/Seoul","korea time":"Asia/Seoul",kst:"Asia/Seoul","korean time":"Asia/Seoul","uzbekistan time":"Asia/Samarkand",uzt:"Asia/Samarkand","vladivostok time":"Asia/Vladivostok",vlat:"Asia/Vladivostok","maldives time":"Indian/Maldives",mvt:"Indian/Maldives","mauritius time":"Indian/Mauritius",mut:"Indian/Mauritius","marshall islands time":m+"Kwajalein",mht:m+"Kwajalein","samoa standard time":m+"Midway",sst:m+"Midway","somoan time":m+"Midway","chamorro standard time":m+"Guam",chst:m+"Guam","papua new guinea time":m+"Bougainville",pgt:m+"Bougainville"};let c=t().timezones,f=Object.keys(c).reduce((t,a)=>(t[a]=a,t),{});var y=Object.assign({},l,f);const g=/(\-?[0-9]+)h(rs)?/i,D=/(\-?[0-9]+)/,p=/utc([\-+]?[0-9]+)/i,w=/gmt([\-+]?[0-9]+)/i,A=function(t){return(t=Number(t))>-13&&t<13?"Etc/GMT"+(t=((t*=-1)>0?"+":"")+t):null},b=function(t){let a=t.match("#Timezone+");a=a.remove("(in|for|by|near|at)");let e=a.text("reduced");if(t.remove("#Timezone+"),y.hasOwnProperty(e))return y[e];let i=function(t){let a=t.match(g);if(null!==a)return A(a[1]);if(a=t.match(p),null!==a)return A(a[1]);if(a=t.match(w),null!==a){let t=-1*Number(a[1]);return A(t)}return a=t.match(D),null!==a?A(a[1]):null}(e);return i||null},k={today:t=>new Day(t.today,null,t),yesterday:t=>new Day(t.today.minus(1,"day"),null,t),tomorrow:t=>new Day(t.today.plus(1,"day"),null,t),eom:t=>{let a=t.today.endOf("month");return a=a.startOf("day"),new Day(a,null,t)},eoy:t=>{let a=t.today.endOf("year");return a=a.startOf("day"),new Day(a,null,t)},now:t=>new Moment(t.today,null,t)};k.tommorrow=k.tomorrow,k.tmrw=k.tomorrow,k.anytime=k.today,k.sometime=k.today;const x={day:Day,hour:Hour,evening:Hour,second:Moment,milliscond:Moment,instant:Moment,minute:Minute,week:Week,weekend:WeekEnd,month:class AnyMonth extends Unit{constructor(t,a,e){super(t,a,e),this.unit="month",this.d.isValid()&&(this.d=this.d.startOf(this.unit))}},quarter:AnyQuarter,year:Year,season:Season,yr:Year,qtr:AnyQuarter,wk:Week,sec:Moment,hr:Hour};let V=`^(${Object.keys(x).join("|")})$`;const v=function(t){return{date:t.today.date(),month:t.today.month(),year:t.today.year()}},T={day:Day,week:Week,weekend:WeekEnd,month:Month,quarter:Quarter,season:Season,hour:Hour,minute:Minute},M=function(i,s){i=i.clone(),(s=s||{}).today=s.today||t.now(),i.match("[^the] !#Value",0).remove();let o=function(t){let a={},i=t.match("#DateShift+");if(!1===i.found)return a;i.match("#Cardinal #Duration").forEach(t=>{let i=t.match("#Cardinal").text("normal");if(i=parseFloat(i),i&&"number"==typeof i){let r=n(t);!0===e[r]&&(a[r]=i)}}),!0===i.has("(before|ago|hence|back)$")&&Object.keys(a).forEach(t=>a[t]*=-1),i.remove("#Cardinal #Duration");let r=i.match("[<unit>#Duration] [<dir>(after|before)]");if(r.found){let t=r.groups("unit").text("reduced"),e=r.groups("dir").text("reduced");"after"===e?a[t]=1:"before"===e&&(a[t]=-1)}if(r=i.match("half (a|an) [#Duration]",0),r.found){let t=n(r);a[t]=.5}return t.remove("#DateShift"),a}(i),d=function(t){let a=t.match("[<num>#Value] [<unit>#Duration+] (of|in)");if(a.found){let e=a.groups(),i=e.num.text("reduced"),n=e.unit.text("reduced"),s={unit:n,num:Number(i)||0};return r[n]||(s.num-=1),t=t.remove(a),s}if(a=t.match("[<dir>(first|initial|last|final)] [<unit>#Duration+] (of|in)"),a.found){let e=a.groups(),i=e.dir.text("reduced"),n=e.unit.text("reduced");"initial"===i&&(i="first"),"final"===i&&(i="last");let r={unit:n,dir:i};return t=t.remove(a),r}return{}}(i),h=b(i),m=u(i,s),l=function(t){let a=t.match("#WeekDay");return a.found&&!t.has("^#WeekDay$")?t.has("(this|next|last) (next|upcoming|coming|past)? #WeekDay")?null:(t.remove(a),a.text("reduced")):null}(i),c=function(t){let a=t.match("[(start|beginning) of] .",0);return a.found?(t.remove(a),"start"):(a=t.match("[end of] .",0),a.found?(t.remove(a),"end"):(a=t.match("[(middle|midpoint|center) of] .",0),a.found?(t.remove(a),"middle"):null))}(i),f=function(t){if(t.has("(next|last|this)$"))return null;let a=t.match("^this? (next|upcoming|coming)");return a.found?(t.remove(a),"next"):(a=t.match("^this? (past)"),a.found?(t.remove(a),"this-past"):(a=t.match("^this? (last|previous)"),a.found?(t.remove(a),"last"):(a=t.match("^(this|current)"),a.found?(t.remove(a),"this"):null)))}(i);if(h){let t=(s=Object.assign({},s,{timezone:h})).today.format("iso-short");s.today=s.today.goto(s.timezone).set(t)}let y=null;return y=y||function(t,a,e){let i=null;!1===t.found&&(null!==e.time&&(i=new Moment(a.today,null,a)),Object.keys(e.shift).length>0&&(i=e.shift.hour||e.shift.minute?new Moment(a.today,null,a):new Day(a.today,null,a)));let n=t.text("reduced");return!0===k.hasOwnProperty(n)?k[n](a):"next"===n&&Object.keys(e.shift).length>0?k.tomorrow(a):i}(i,s,{shift:o,time:m,rel:f}),y=y||function(t,e){let i=null,n=t.match("[<holiday>#Holiday+] [<year>#Year?]"),r=e.today.year();n.groups("year").found&&(r=Number(n.groups("year").text("reduced"))||r);let s=n.groups("holiday").text("reduced"),o=a(s,r,e.timezone);return null!==o&&(o.isBefore(e.today)&&r===e.today.year()&&(o=a(s,r+1,e.timezone)),i=new Holiday(o,null,e)),i}(i,s),y=y||function(t,a){let e=t.match(V);if(!0===e.found){let t=e.text("reduced");if(x.hasOwnProperty(t)){let e=x[t];return e?new e(null,t,a):null}}if(e=t.match("^#WeekDay$"),!0===e.found){let t=e.text("reduced");return new WeekDay(t,null,a)}return null}(i,s),y=y||function(a,e){let i=a.match("(spring|summer|winter|fall|autumn) [<year>#Year?]");if(i.found){let i=a.text("reduced"),n=t(i,e.timezone,{today:v(e)}),r=new Season(n,null,e);if(!0===r.d.isValid())return r}if(i=a.match("[<q>#FinancialQuarter] [<year>#Year?]"),i.found){let a=i.groups("q").text("reduced"),n=t(a,e.timezone,{today:v(e)});if(i.groups("year")){let t=Number(i.groups("year").text())||e.today.year();n=n.year(t)}let r=new Quarter(n,null,e);if(!0===r.d.isValid())return r}if(i=a.match("[<q>#Value] quarter (of|in)? [<year>#Year?]"),i.found){let a=i.groups("q").text("reduced"),n=t("q"+a,e.timezone,{today:v(e)});if(i.groups("year")){let t=Number(i.groups("year").text())||e.today.year();n=n.year(t)}let r=new Quarter(n,null,e);if(!0===r.d.isValid())return r}if(i=a.match("^#Year$"),i.found){let i=a.text("reduced"),n=t(null,e.timezone,{today:v(e)});n=n.year(i);let r=new Year(n,null,e);if(!0===r.d.isValid())return r}return null}(i,s),y=y||function(t,a){let e=a.today.year(),i=t.match("[<date>#Value] of? [<month>#Month] [<year>#Year]");if(i.found||(i=t.match("[<month>#Month] the? [<date>#Value] [<year>#Year]")),i.found){let t={month:i.groups("month").text("reduced"),date:i.groups("date").text("reduced"),year:i.groups("year").text()||e},n=new CalendarDate(t,null,a);if(!0===n.d.isValid())return n}if(i=t.match("[<month>#Month] of? [<year>#Year]"),i.found){let t={month:i.groups("month").text("reduced"),year:i.groups("year").text("reduced")||e},n=new Month(t,null,a);if(!0===n.d.isValid())return n}if(i=t.match("[<date>#Value] of? [<month>#Month]"),i.found||(i=t.match("[<month>#Month] the? [<date>#Value]")),i.found){let t={month:i.groups("month").text("reduced"),date:i.groups("date").text("reduced"),year:a.today.year()},e=new CalendarDate(t,null,a);if(e.d.month()<a.today.month()&&(t.year+=1,e=new CalendarDate(t,null,a)),!0===e.d.isValid())return e}if(t.has("#Month")){let e={month:t.match("#Month").text("reduced"),date:1,year:a.today.year()},i=new Month(e,null,a);if(i.d.month()<a.today.month()&&(e.year+=1,i=new Month(e,null,a)),!0===i.d.isValid())return i}if(i=t.match("#WeekDay [<date>#Value]"),i.found){let t={month:a.today.month(),date:i.groups("date").text("reduced"),year:a.today.year()},e=new CalendarDate(t,null,a);if(!0===e.d.isValid())return e}if(i=t.match("the [<date>#Value]"),i.found){let t={month:a.today.month(),date:i.groups("date").text("reduced"),year:a.today.year()},e=new CalendarDate(t,null,a);if(!0===e.d.isValid())return e.d.isBefore(a.today)&&(e.d=e.d.add(1,"month")),e}if(i=t.match("/[0-9]{4}-[0-9]{2}-[0-9]{2}t[0-9]{2}:/"),i.found){let e=t.text("reduced"),i=new Moment(e,null,a);if(!0===i.d.isValid())return i}let n=t.text("reduced");if(!n)return new Moment(a.today,null,a);let r=new Day(n,null,a);return!1===r.d.isValid()?null:r}(i,s),!y&&l&&(y=new WeekDay(l,null,s),l=null),y?(o&&(y.applyShift(o),o.hour||o.minute?y=new Moment(y.d,null,y.context):(o.week||o.day||o.month)&&(y=new Day(y.d,null,y.context))),l&&"day"!==y.unit&&(y.applyWeekDay(l),y=new WeekDay(y.d,null,y.context)),f&&y.applyRel(f),c&&y.applySection(c),m&&y.applyTime(m),d&&d.unit&&(y=function(t,a={}){let e=T[a.unit];if(!e)return t;let i=t.d;"first"===a.dir||0===a.num?(i=t.start().d,i=i.startOf(a.unit)):"last"===a.dir?(i=i.endOf(t.unit),i="weekend"===a.unit?i.day("saturday",!1):i.startOf(a.unit)):a.num&&("weekend"===a.unit&&(i=i.day("saturday",!0).add(1,"day")),i=i.add(a.num,a.unit));let n=new e(i,null,t.context);return!0===n.d.isValid()?n:t}(y,d)),y):null},O=(t,a)=>"number"==typeof a?t.eq(a):t,C="(in|by|before|during|on|until|after|of|within|all)",E="(last|next|this|previous|current|upcoming|coming)",S="(start|end|middle|starting|ending|midpoint|beginning)",q="(spring|summer|winter|fall|autumn)",W=(t,a)=>{!0===t.found&&t.forEach(t=>{let e=t.text("reduced"),i=parseInt(e,10);i&&i>1e3&&i<3e3&&t.tag("Year",a)})},$=(t,a)=>{!0===t.found&&t.forEach(t=>{let e=t.text("reduced"),i=parseInt(e,10);i&&i>1900&&i<2030&&t.tag("Year",a)})},_="date-values",N="date-tagger",P="section-tagger",z="time-tagger",B=function(t,a){if(t.found){t.tag("Date",a),t.numbers().lessThan(31).ifNo("#Year").tag("#Time",a)}},H="shift-tagger",Y=["act","aft","akst","anat","art","azot","azt","bnt","bot","bt","cast","cat","cct","chast","chut","ckt","cvt","cxt","davt","eat","ect","fjt","fkst","fnt","gamt","get","gft","gilt","gyt","hast","hncu","hneg","hnnomx","hnog","hnpm","hnpmx","hntn","hovt","iot","irkt","jst","kgt","kost","lint","magt","mart","mawt","mmt","nct","nft","novt","npt","nrt","nut","nzst","omst","pet","pett","phot","phst","pont","pwt","ret","sakt","samt","sbt","sct","sret","srt","syot","taht","tft","tjt","tkt","tlt","tmt","tot","tvt","ulat","vut","wakt","wat","wet","wft","wit","wst","yekt"].reduce((t,a)=>(t[a]=!0,t),{});var L={compute:{dates:function(t){var a;return function(t){t.match("in the (night|evening|morning|afternoon|day|daytime)").tag("Time","in-the-night"),t.match("(#Value|#Time) (am|pm)").tag("Time","value-ampm"),t.match("/^[0-9]{4}-[0-9]{2}$/").tag("Date","2012-06"),t.match("(tue|thu)").tag("WeekDay","misc-weekday"),t.match("(march|april|may) (and|to|or|through|until)? (march|april|may)").tag("Date").match("(march|april|may)").tag("Month","march|april|may");let a=t.if("#Month");!0===a.found&&(a.match("#Month #Date+").tag("Date","correction-numberRange"),a.match("#Value of #Month").tag("Date","value-of-month"),a.match("#Cardinal #Month").tag("Date","cardinal-month"),a.match("#Month #Value (and|or|to)? #Value+").tag("Date","value-to-value"),a.match("#Month the #Value").tag("Date","month-the-value"),a.match("(march|may) to? #Date").tag("Date").match("^.").tag("Month","march-to"),a.match("^(march|may)$").tag("Month","single-march"),a.match("#Month or #Month").tag("Date","month-or-month"));let e=t.if("#Value");if(!0===e.found){e.match("(#WeekDay|#Month) #Value").ifNo("#Money").tag("Date","date-value"),e.match("#Value (#WeekDay|#Month)").ifNo("#Money").tag("Date","value-date"),e.match("#TextValue #TextValue").if("#Date").tag("#Date","textvalue-date"),e.match("#Value (#WeekDay|#Duration) back").tag("#Date","3-back");let t=e.if("#Duration");!0===t.found&&(t.match("for #Value #Duration").tag("Date","for-x-duration"),t.match("#Value #Duration #Conjunction").tag("Date","val-duration-conjunction"),t.match(C+"? #Value #Duration").tag("Date","value-duration"),t.match("#Value #Duration old").unTag("Date","val-years-old"))}let i=t.if(q);!0===i.found&&(i.match(`${C}? ${E} ${q}`).tag("Date","thisNext-season"),i.match(`the? ${S} of ${q}`).tag("Date","section-season"),i.match(`${q} ${C}? #Cardinal`).tag("Date","season-year"));let n=t.if("#Date");!0===n.found&&(n.match("#Date the? #Ordinal").tag("Date","correction"),n.match(E+" #Date").tag("Date","thisNext-date"),n.match("due? (by|before|after|until) #Date").tag("Date","by"),n.match("(last|next|this|previous|current|upcoming|coming|the) #Date").tag("Date","next-feb"),n.match(`the? ${S} of #Date`).tag("Date","section-of"),n.match("#Ordinal #Duration in #Date").tag("Date","duration-in"),n.match("(early|late) (at|in)? the? #Date").tag("Time","early-evening"),n.match("#Date (by|before|after|at|@|about) #Cardinal").not("^#Date").tag("Time","date-before-Cardinal"),n.match("#Date [(am|pm)]",0).unTag("Verb").unTag("Copula").tag("Time","date-am"),n.match("#Date (#Preposition|to) #Date").ifNo("#Duration").tag("Date","date-prep-date"));let r=t.if("#Cardinal");if(!0===r.found){let t=r.match("#Date #Value [#Cardinal]",0);W(t,"date-value-year"),t=r.match("#Date [#Cardinal]",0),$(t,"date-year"),t=r.match(S+" of [#Cardinal]"),$(t,"section-year"),t=r.match("#Month #Value [#Cardinal]",0),W(t,"month-value-year"),t=r.match("#Month #Value to #Value [#Cardinal]",0),W(t,"month-range-year"),t=r.match("(in|of|by|during|before|starting|ending|for|year|since) [#Cardinal]",0),W(t,"in-year-1"),t=r.match("(q1|q2|q3|q4) [#Cardinal]",0),W(t,"in-year-2"),t=r.match("#Ordinal quarter of? [#Cardinal]",0),W(t,"in-year-3"),t=r.match("the year [#Cardinal]",0),W(t,"in-year-4"),t=r.match("it (is|was) [#Cardinal]",0),$(t,"in-year-5"),r.match(S+" of #Year").tag("Date");let a=r.match("between [#Cardinal] and [#Cardinal]");W(a.groups("0"),"between-year-and-year-1"),W(a.groups("1"),"between-year-and-year-2")}let s=t.if("#Time");!0===s.found&&s.match("(by|before|after|at|@|about) #Time").tag("Time","preposition-time");let o=t.match("^/^20[012][0-9]$/$");$(o,"2020-ish"),t.match("(in|after) /^[0-9]+(min|sec|wk)s?/").tag("Date","shift-units"),t.match("#Date [(now|night|sometime)]",0).tag("Time","date-now"),t.match("(from|starting|until|by) now").tag("Date","for-now"),t.match("(each|every) night").tag("Date","for-now")}(t),(a=t).has("#Value")&&(a.match("#Month #Value to #Value of? #Year?").tag("Date",_),a.match("#Value to #Value of? #Month #Year?").tag("Date",_),a.match("#Value #Duration of #Date").tag("Date",_),a.match("#Value+ #Duration (after|before|into|later|afterwards|ago)?").tag("Date",_),a.match("#Value #Date").tag("Date",_),a.match("#Date #Value").tag("Date",_),a.match("#Date #Preposition #Value").tag("Date",_),a.match("#Date (after|before|during|on|in) #Value").tag("Date",_),a.match("#Value (year|month|week|day) and a half").tag("Date",_),a.match("#Value and a half (years|months|weeks|days)").tag("Date",_),a.match("on the #Ordinal").tag("Date",_),a.match("#Month #Value+ (and|or) #Value").tag("Date","date-or-date"),a.match("#Value+ (and|or) #Value of #Month ").tag("Date","date-and-date")),function(t){t.match("(spring|summer|winter|fall|autumn|springtime|wintertime|summertime)").match("#Noun").tag("Season",N),t.match("(q1|q2|q3|q4)").tag("FinancialQuarter",N),t.match("(this|next|last|current) quarter").tag("FinancialQuarter",N),t.match("(this|next|last|current) season").tag("Season",N),t.has("#Date")&&(t.match("#Date #Preposition #Date").tag("Date",N),t.match("(once|twice) (a|an|each) #Date").tag("Date",N),t.match("#Date+").tag("Date",N),t.match("(by|until|on|in|at|during|over|every|each|due) the? #Date").notIf("#PhrasalVerb").tag("Date","until-june"),t.match("a #Duration").tag("Date",N),t.match("(between|from) #Date").tag("Date",N),t.match("(to|until|upto) #Date").tag("Date",N),t.match("#Date and #Date").tag("Date",N),t.match("(by|until|after|before|during|on|in|following|since) (next|this|last)? (#Date|#Date)").notIf("#PhrasalVerb").tag("Date",N),t.match("the? #Date after next one?").tag("Date",N),t.match("(about|approx|approximately|around) #Date").tag("Date",N))}(t),function(t){t.has("#Date")&&(t.match("this? (last|next|past|this|previous|current|upcoming|coming|the) #Date").tag("Date",P),t.match("(starting|beginning|ending) #Date").tag("Date",P),t.match("the? (start|end|middle|beginning) of (last|next|this|the) (#Date|#Date)").tag("Date",P),t.match("(the|this) #Date").tag("Date",P),t.match("#Date up to #Date").tag("Date",P))}(t),function(t){t.match("#Cardinal oclock").tag("Time",z),t.match("/^[0-9]{2}h[0-9]{2}$/").tag("Time",z),t.match("/^[0-9]{2}/[0-9]{2}/").tag("Date",z).unTag("Value"),t.match("[#Value] (in|at) the? (morning|evening|night|nighttime)").tag("Time",z),t.has("#Month")||(t.match("(5|10|15|20|five|ten|fifteen|quarter|twenty|half) (to|after|past) #Cardinal").tag("Time",z),t.match("(at|by|before) (5|10|15|20|five|ten|fifteen|twenty|quarter|half) (after|past|to)").tag("Time","at-20-past"));let a=t.if("#Date");if(a.found){a.match("/^[0-9]{4}[:-][0-9]{2}[:-][0-9]{2}T[0-9]/").tag("Time",z),a.match("#Date [at #Cardinal]",0).notIf("#Year").tag("Time",z),a.match("half an (hour|minute|second)").tag("Date",z),a.match("(in|for|by|near|at) #Timezone").tag("Timezone",z),a.match("#Time to #Time").tag("Date",z),a.match("#Time [(sharp|on the dot)]",0).tag("Time",z);let e=a.if("#NumberRange");if(e.found){let t=e.match("[#NumberRange+] (on|by|at)? #WeekDay",0);B(t,"3-4-tuesday"),e.match("[#NumberRange+] (on|by|at)? #Month #Value",0),B(t,"3-4 mar 3"),e.match("[#NumberRange] to (#NumberRange && #Time)",0),B(t,"3-4pm"),e.match("(#NumberRange && #Time) to [#NumberRange]",0),B(t,"3pm-4")}let i=a.match("(from|between) #Cardinal and #Cardinal (in|on)? (#WeekDay|tomorrow|yesterday)");B(i,"from 9-5 tues"),i=t.match("#Cardinal to #Cardinal (#WeekDay|tomorrow|yesterday)"),B(i,"9-5 tues"),i=a.match("(from|between) [#NumericValue] (to|and) #Time",0).tag("Time","4-to-5pm"),B(i,"from 9-5pm"),i=a.match("(#WeekDay|tomorrow|yesterday) (from|between)? (#Cardinal|#Time) (and|to) (#Cardinal|#Time)"),B(i,"tues 3-5"),i=a.match("#Month #Value+ (from|between) [<time>(#Cardinal|#Time) (and|to) (#Cardinal|#Time)]").group("time"),B(i,"sep 4 from 9-5"),i=a.match("#Time to #Cardinal on? #Date"),B(i,"3pm-4 wed"),i=a.match("#Cardinal to #Time on? #Date"),B(i,"3-4pm wed"),i=a.match("#Cardinal to #Cardinal on? (#WeekDay|#Month #Value)"),B(i,"3-4 wed")}t.match("(at|around|near|#Date) [#Cardinal (thirty|fifteen) (am|pm)?]",0).tag("Time",z),t.match("(anytime|sometime) (before|after|near) #Cardinal").tag("Date","antime-after-3").lastTerm().tag("Time")}(t),function(t){t.has("#Date")&&(t.match("#Cardinal #Duration (before|after|ago|from|hence|back)").tag("DateShift",H),t.match("in #Cardinal #Duration").tag("DateShift",H),t.match("in a (few|couple) of? #Duration").tag("DateShift",H),t.match("#Cardinal #Duration and? #DateShift").tag("DateShift",H),t.match("#DateShift and #Cardinal #Duration").tag("DateShift",H),t.match("[#Duration (after|before)] #Date",0).tag("DateShift",H),t.match("in half (a|an) #Duration").tag("DateShift",H))}(t),function(t){t.match("#Month #Ordinal and #Ordinal").tag("Date","ord-and-ord"),t.match("every other #Duration").tag("Date","every-other"),t.match("(every|any|each|a) (day|weekday|week day|weekend|weekend day)").tag("Date","any-weekday"),t.match("(every|any|each|a) (#WeekDay)").tag("Date","any-wednesday"),t.match("(every|any|each|a) (#Duration)").tag("Date","any-week")}(t),function(t){let a=t.match("#Time [#Acronym]",0);if(a.found){let t=a.text("reduced");!0===Y[t]&&a.tag("Timezone","tz-abbr")}}(t),function(t){if(t.has("#Date")){let a=t.match("#Date+ by #Date+");a.found&&!a.has("^due")&&a.match("^#Date+").unTag("Date","by-monday"),t.match("[(wed|sat)] (#Month|#Year)",0).tag("WeekDay","wed");let e=t.match("#Date+");e.match("^day$").unTag("Date","spa-day"),e.match("(in|of|by|for)? (#Possessive && #Date)").unTag("Date","tomorrows meeting");let i="(yesterday|today|tomorrow)";e.has(i)&&(e.match(i+" [#Value]$").unTag("Date","yesterday-7"),e.match(`^[#Value] ${i}$`,0).unTag("Date","7 yesterday"),e.match(`#WeekDay+ ${i}$`).unTag("Date").lastTerm().tag("Date","fri-yesterday")),e.match("on #Cardinal$").unTag("Date","on 5"),e.match("this tomorrow").terms(0).unTag("Date","this-tomorrow"),e.match("(q1|q2|q3|q4) #Year").tag("Date","fix-tagger"),e.match("^#Value (this|next|last)").terms(0).unTag("Date","4 next"),e.has("(last|this|next)")&&(e.match("(last|this|next) #Duration #Value").terms(2).unTag("Date","this month 7"),e.match("!#Month #Value (last|this|next) #Date").terms(0).unTag("Date","7 this month")),e.has("^between")&&!e.has("and .")&&e.unTag("Date","fix-tagger"),e.match("(in|over) the #Duration #Date+?").unTag("Date","over-the-duration"),e.has("(minutes|seconds|weeks|hours|days|months)")&&!e.has("#Value #Duration")&&e.match("(minutes|seconds|weeks|hours|days|months)").unTag("Date","log-hours"),e.has("about #Holiday")&&e.match("about").unTag("#Date","about-thanksgiving"),e.match("#Ordinal quarter of? #Year").unTag("Fraction"),e.match("(from|by|before) now").unTag("Time"),e.match("#Date+").match("^the").unTag("Date")}}(t),t.debug(),t}},api:function(t){class Dates extends t{constructor(t,a,e){super(t,a,e),this.viewType="Nouns"}parse(t){return console.log("=-=-=-= here -=-=-=-"),O(this,t).map(M)}json(t={}){return this.map(a=>{let e=a.toView().json(t)[0]||{};if(t&&!0!==t.dates){let t=M(a);e.dates=function(t){return console.log(t),{}}(t)}return e},[])}}t.prototype.dates=function(t){let a=function(t){let a=t.match("#Date+");a=a.filter(t=>{let a=t.has("^#Duration+$")||t.has("^#Value #Duration+$");return!(!0!==a||!t.has("(#FinancialQuarter|quarter)"))||!1===a});let e=a.match("[#Cardinal #Duration (in|on|this|next|during|for)] #Date",0);return e.found&&(a=a.not(e)),e=a.match("[#Cardinal #Duration] #WeekDay",0),e.found&&(a=a.not(e)),e=a.match("#Date [for #Value #Duration]$",0),e.found&&(a=a.not(e)),e=a.match("[#Cardinal #Duration] #Date",0),e.found&&!a.has("#Cardinal #Duration] (ago|from|before|after|back)")&&(a=a.not(e)),e=a.match("for #Cardinal #Duration"),e.found&&(a=a.not(e)),a=a.notIf("^one (#WeekDay|#Month)$"),a=function(t){let a=null;return t.has("^(between|within) #Date")?t:(t.has("#Month")&&(a=t.match("[#Month #Value] and? #Month",0).ifNo("@hasDash$"),a.found&&(t=t.splitAfter(a)),a=t.match("[#Value #Month] and? #Value #Month",0),a.found&&(t=t.splitAfter(a)),a=t.match("^[#Month] and? #Month #Ordinal?$",0),a.found&&(t=t.splitAfter(a)),a=t.match("[#Month #Value] #Month",0).ifNo("@hasDash$"),a.found&&(t=t.splitAfter(a))),t.has("#WeekDay")&&(a=t.match("^[#WeekDay] and? #WeekDay$",0).ifNo("@hasDash$"),a.found&&(t=t.splitAfter(a)),a=t.match("#WeekDay #WeekDay and? #WeekDay"),a.found&&(t=t.splitOn("#WeekDay")),a=t.match("[#WeekDay] (and|or|this|next)? #WeekDay",0).ifNo("@hasDash$"),a.found&&(t=t.splitAfter("#WeekDay"))),a=t.match("(this|next) #Duration [(today|tomorrow|yesterday)]",0),a.found&&(t=t.splitBefore(a)),a=t.match("[(today|tomorrow|yesterday)] #Value #Month",0),a.found&&(t=t.splitAfter(a)),a=t.match("[(today|tomorrow|yesterday)] (today|tomorrow|yesterday|#WeekDay)",0).ifNo("@hasDash$"),a.found&&(t=t.splitAfter(a)),t=t.not("^and"))}(a),a}(this);return a=O(a,t),new Dates(this.document,a.pointer)}},hooks:["dates"]};export{L as default};
