import*as e from"fs";const t={highWaterMark:64};var s={lib:{streamFile:function(s,n,o){const r=this;return o=Object.assign({},t,o),new Promise((t,c)=>{let a=r.model();const l=r.methods().one.tokenize.splitSentences,i=e.createReadStream(s,o);let u="",d=[];const h=e=>{let t=n(r(e));t&&t.found&&d.push(t.document[0])};i.on("data",(function(e){u+=e;let t=l(u,a);u=t.pop(),t.forEach(h)})),i.on("end",(function(){h(u);let e=r("");e.document=d,t(e)})),i.on("error",(function(e){console.error(e.stack),c(e)}))})}}};let n={};var o={lib:{keyPress:function(e,t,s={}){const o=this;let r=(0,this.methods().one.tokenize.splitSentences)(e,this.model()),c=[];return r.forEach(e=>{if(!0===n.hasOwnProperty(e))c.push(n[e].data),n[e].used=!0;else{s.verbose&&console.log(`parsing: '${e}'\n`);let r=o(e,t).json(0);n[e]={data:r,used:!0},c.push(r)}}),Object.keys(n).forEach(e=>{!0!==n[e].used?delete n[e]:n[e].used=null}),s.verbose&&console.log(Object.keys(n).length+"' sentences in cache\n"),o(c)}}};export{o as keyPress,s as streamFile};
