{"version":3,"file":"compromise-numbers.js","sources":["../src/money/find.js","../src/numbers/find.js","../src/fractions/find.js","../src/percentage/find.js","../src/numbers/convert/toNumber/findModifiers.js","../src/numbers/convert/toNumber/data.js","../src/numbers/convert/toNumber/validate.js","../src/numbers/convert/toNumber/parseDecimals.js","../src/numbers/convert/toNumber/parseNumeric.js","../src/numbers/convert/toNumber/index.js","../src/fractions/parse.js","../src/numbers/parse.js","../src/numbers/_agreeUnits.js","../src/numbers/convert/_toString.js","../src/numbers/convert/toText/index.js","../src/numbers/convert/toOrdinal/numOrdinal.js","../src/numbers/convert/toOrdinal/textOrdinal.js","../src/numbers/convert/_symbols.js","../src/numbers/convert/makeNumber.js","../src/numbers/methods.js","../src/percentage/methods.js","../src/money/data/currencies.js","../src/money/parse.js","../src/money/methods.js","../src/fractions/_lib.js","../src/fractions/methods.js","../src/tagger/fractions.js","../src/tagger/money.js","../src/tagger/index.js","../src/tags.js","../src/money/data/lexicon.js","../src/index.js"],"sourcesContent":["const findMoney = function (doc, n) {\n  // five dollars\n  let res = doc.match('#Value+? #Money+ #Currency+ (and #Money+ #Currency+)+?')\n  // let res = doc.match('#Value+? #Money+ #Currency+ (and #Money #Money? #Currency+)+?')\n  // res.debug()\n  // $5.05\n  doc.match('#Money').forEach((m) => {\n    // don't duplicate it\n    if (!m.lookAfter('#Currency').found) {\n      res = res.concat(m)\n    }\n  })\n  // five percent\n  // m = m.concat(doc.match('#Money ', 0))\n  // m = m.unique()\n  // m.debug()\n\n  // doc.debug()\n  // let m = doc.splitOn('(#Money|#Currency)+')\n  // m = m.if('#Money').if('#Value')\n  //grab (n)th result\n  if (typeof n === 'number') {\n    res = res.get(n)\n  }\n  return res\n}\nmodule.exports = findMoney\n","const ones = 'one|two|three|four|five|six|seven|eight|nine'\nconst tens = 'twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|fourty'\nconst teens = 'eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen'\n\n// this is a bit of a mess\nconst findNumbers = function (doc, n) {\n  let m = doc.match('#Value+')\n\n  //\"50 83\"\n  if (m.has('#NumericValue #NumericValue')) {\n    //a comma may mean two numbers\n    if (m.has('#Value @hasComma #Value')) {\n      m.splitAfter('@hasComma')\n    } else if (m.has('#NumericValue #Fraction')) {\n      m.splitAfter('#NumericValue #Fraction')\n    } else {\n      m = m.splitAfter('#NumericValue')\n    }\n  }\n\n  //three-length\n  if (m.has('#Value #Value #Value') && !m.has('#Multiple')) {\n    //twenty-five-twenty\n    if (m.has('(' + tens + ') #Cardinal #Cardinal')) {\n      m = m.splitAfter('(' + tens + ') #Cardinal')\n    }\n  }\n\n  //two-length ones\n  if (m.has('#Value #Value')) {\n    //june 21st 1992 is two seperate values\n    if (m.has('#NumericValue #NumericValue')) {\n      m = m.splitOn('#Year')\n    }\n    //sixty fifteen\n    if (m.has('(' + tens + ') (' + teens + ')')) {\n      m = m.splitAfter('(' + tens + ')')\n    }\n\n    //\"72 82\"\n    let double = m.match('#Cardinal #Cardinal')\n    if (double.found && !m.has('(point|decimal|#Fraction)')) {\n      //not 'two hundred'\n      if (!double.has('#Cardinal (#Multiple|point|decimal)')) {\n        // two fifty five\n        let noMultiple = m.has(`(${ones}) (${tens})`)\n        // twenty one\n        let tensVal = double.has('(' + tens + ') #Cardinal')\n        // hundredOne\n        let multVal = double.has('#Multiple #Value')\n        //one proper way, 'twenty one', or 'hundred one'\n        if (!noMultiple && !tensVal && !multVal) {\n          // double = double.firstTerm()\n          double.terms().forEach((d) => {\n            m = m.splitOn(d)\n          })\n        }\n      }\n    }\n\n    //seventh fifth\n    if (m.match('#Ordinal #Ordinal').match('#TextValue').found && !m.has('#Multiple')) {\n      //the one proper way, 'twenty first'\n      if (!m.has('(' + tens + ') #Ordinal')) {\n        m = m.splitAfter('#Ordinal')\n      }\n    }\n    //fifth five\n    if (m.has('#Ordinal #Cardinal')) {\n      m = m.splitBefore('#Cardinal+')\n    }\n    //five 2017 (support '5 hundred', and 'twenty 5'\n    if (m.has('#TextValue #NumericValue') && !m.has('(' + tens + '|#Multiple)')) {\n      m = m.splitBefore('#NumericValue+')\n    }\n  }\n\n  //5-8\n  if (m.has('#NumberRange')) {\n    m = m.splitAfter('#NumberRange')\n  }\n  //grab (n)th result\n  if (typeof n === 'number') {\n    m = m.get(n)\n  }\n  return m\n}\nmodule.exports = findNumbers\n","const findFractions = function (doc, n) {\n  // five eighths\n  let m = doc.match('#Fraction+')\n  // remove 'two and five eights'\n  m = m.filter((r) => {\n    return !r.lookBehind('#Value and$').found\n  })\n  if (typeof n === 'number') {\n    m = m.eq(n)\n  }\n  return m\n}\nmodule.exports = findFractions\n","const findPercentages = function (doc, n) {\n  // 5%\n  let m = doc.match('#Percent+')\n  // five percent\n  m = m.concat(doc.match('[#Cardinal] percent', 0))\n  if (typeof n === 'number') {\n    m = m.eq(n)\n  }\n  return m\n}\nmodule.exports = findPercentages\n","//support global multipliers, like 'half-million' by doing 'million' then multiplying by 0.5\nconst findModifiers = str => {\n  const mults = [\n    {\n      reg: /^(minus|negative)[\\s\\-]/i,\n      mult: -1,\n    },\n    {\n      reg: /^(a\\s)?half[\\s\\-](of\\s)?/i,\n      mult: 0.5,\n    },\n    //  {\n    //   reg: /^(a\\s)?quarter[\\s\\-]/i,\n    //   mult: 0.25\n    // }\n  ]\n  for (let i = 0; i < mults.length; i++) {\n    if (mults[i].reg.test(str) === true) {\n      return {\n        amount: mults[i].mult,\n        str: str.replace(mults[i].reg, ''),\n      }\n    }\n  }\n  return {\n    amount: 1,\n    str: str,\n  }\n}\n\nmodule.exports = findModifiers\n","module.exports = {\n  ones: {\n    zeroth: 0,\n    first: 1,\n    second: 2,\n    third: 3,\n    fourth: 4,\n    fifth: 5,\n    sixth: 6,\n    seventh: 7,\n    eighth: 8,\n    ninth: 9,\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  },\n  teens: {\n    tenth: 10,\n    eleventh: 11,\n    twelfth: 12,\n    thirteenth: 13,\n    fourteenth: 14,\n    fifteenth: 15,\n    sixteenth: 16,\n    seventeenth: 17,\n    eighteenth: 18,\n    nineteenth: 19,\n    ten: 10,\n    eleven: 11,\n    twelve: 12,\n    thirteen: 13,\n    fourteen: 14,\n    fifteen: 15,\n    sixteen: 16,\n    seventeen: 17,\n    eighteen: 18,\n    nineteen: 19,\n  },\n  tens: {\n    twentieth: 20,\n    thirtieth: 30,\n    fortieth: 40,\n    fourtieth: 40,\n    fiftieth: 50,\n    sixtieth: 60,\n    seventieth: 70,\n    eightieth: 80,\n    ninetieth: 90,\n    twenty: 20,\n    thirty: 30,\n    forty: 40,\n    fourty: 40,\n    fifty: 50,\n    sixty: 60,\n    seventy: 70,\n    eighty: 80,\n    ninety: 90,\n  },\n  multiples: {\n    hundredth: 100,\n    thousandth: 1000,\n    millionth: 1e6,\n    billionth: 1e9,\n    trillionth: 1e12,\n    quadrillionth: 1e15,\n    quintillionth: 1e18,\n    sextillionth: 1e21,\n    septillionth: 1e24,\n    hundred: 100,\n    thousand: 1000,\n    million: 1e6,\n    billion: 1e9,\n    trillion: 1e12,\n    quadrillion: 1e15,\n    quintillion: 1e18,\n    sextillion: 1e21,\n    septillion: 1e24,\n    grand: 1000,\n  },\n}\n","const words = require('./data')\n\n//prevent things like 'fifteen ten', and 'five sixty'\nconst isValid = (w, has) => {\n  if (words.ones.hasOwnProperty(w)) {\n    if (has.ones || has.teens) {\n      return false\n    }\n  } else if (words.teens.hasOwnProperty(w)) {\n    if (has.ones || has.teens || has.tens) {\n      return false\n    }\n  } else if (words.tens.hasOwnProperty(w)) {\n    if (has.ones || has.teens || has.tens) {\n      return false\n    }\n  }\n  return true\n}\nmodule.exports = isValid\n","const words = require('./data')\n\n//concatenate into a string with leading '0.'\nconst parseDecimals = function(arr) {\n  let str = '0.'\n  for (let i = 0; i < arr.length; i++) {\n    let w = arr[i]\n    if (words.ones.hasOwnProperty(w) === true) {\n      str += words.ones[w]\n    } else if (words.teens.hasOwnProperty(w) === true) {\n      str += words.teens[w]\n    } else if (words.tens.hasOwnProperty(w) === true) {\n      str += words.tens[w]\n    } else if (/^[0-9]$/.test(w) === true) {\n      str += w\n    } else {\n      return 0\n    }\n  }\n  return parseFloat(str)\n}\n\nmodule.exports = parseDecimals\n","//parse a string like \"4,200.1\" into Number 4200.1\nconst parseNumeric = str => {\n  //remove ordinal - 'th/rd'\n  str = str.replace(/1st$/, '1')\n  str = str.replace(/2nd$/, '2')\n  str = str.replace(/3rd$/, '3')\n  str = str.replace(/([4567890])r?th$/, '$1')\n  //remove prefixes\n  str = str.replace(/^[$€¥£¢]/, '')\n  //remove suffixes\n  str = str.replace(/[%$€¥£¢]$/, '')\n  //remove commas\n  str = str.replace(/,/g, '')\n  //split '5kg' from '5'\n  str = str.replace(/([0-9])([a-z\\u00C0-\\u00FF]{1,2})$/, '$1')\n  return str\n}\n\nmodule.exports = parseNumeric\n","const findModifiers = require('./findModifiers')\nconst words = require('./data')\nconst isValid = require('./validate')\nconst parseDecimals = require('./parseDecimals')\nconst parseNumeric = require('./parseNumeric')\nconst improperFraction = /^([0-9,\\. ]+)\\/([0-9,\\. ]+)$/\n\n//some numbers we know\nconst casualForms = {\n  'a few': 3,\n  'a couple': 2,\n  'a dozen': 12,\n  'two dozen': 24,\n  zero: 0,\n}\n\n// a 'section' is something like 'fifty-nine thousand'\n// turn a section into something we can add to - like 59000\nconst section_sum = (obj) => {\n  return Object.keys(obj).reduce((sum, k) => {\n    sum += obj[k]\n    return sum\n  }, 0)\n}\n\n//turn a string into a number\nconst parse = function (str) {\n  //convert some known-numbers\n  if (casualForms.hasOwnProperty(str) === true) {\n    return casualForms[str]\n  }\n  //'a/an' is 1\n  if (str === 'a' || str === 'an') {\n    return 1\n  }\n  const modifier = findModifiers(str)\n  str = modifier.str\n  let last_mult = null\n  let has = {}\n  let sum = 0\n  let isNegative = false\n  const terms = str.split(/[ -]/)\n  // const isFraction = findFraction(terms)\n  for (let i = 0; i < terms.length; i++) {\n    let w = terms[i]\n    w = parseNumeric(w)\n\n    if (!w || w === 'and') {\n      continue\n    }\n    if (w === '-' || w === 'negative') {\n      isNegative = true\n      continue\n    }\n    if (w.charAt(0) === '-') {\n      isNegative = true\n      w = w.substr(1)\n    }\n\n    //decimal mode\n    if (w === 'point') {\n      sum += section_sum(has)\n      sum += parseDecimals(terms.slice(i + 1, terms.length))\n      sum *= modifier.amount\n      return sum\n    }\n\n    //improper fraction\n    const fm = w.match(improperFraction)\n    if (fm) {\n      const num = parseFloat(fm[1].replace(/[, ]/g, ''))\n      const denom = parseFloat(fm[2].replace(/[, ]/g, ''))\n      if (denom) {\n        sum += num / denom || 0\n      }\n      continue\n    }\n    // try to support 'two fifty'\n    if (words.tens.hasOwnProperty(w)) {\n      if (has.ones && Object.keys(has).length === 1) {\n        sum = has.ones * 100\n        has = {}\n      }\n    }\n\n    //prevent mismatched units, like 'seven eleven' if not a fraction\n    if (isValid(w, has) === false) {\n      return null\n    }\n\n    //buildOut section, collect 'has' values\n    if (/^[0-9\\.]+$/.test(w)) {\n      has['ones'] = parseFloat(w) //not technically right\n    } else if (words.ones.hasOwnProperty(w) === true) {\n      has['ones'] = words.ones[w]\n    } else if (words.teens.hasOwnProperty(w) === true) {\n      has['teens'] = words.teens[w]\n    } else if (words.tens.hasOwnProperty(w) === true) {\n      has['tens'] = words.tens[w]\n    } else if (words.multiples.hasOwnProperty(w) === true) {\n      let mult = words.multiples[w]\n\n      //something has gone wrong : 'two hundred five hundred'\n      //possibly because it's a fraction\n      if (mult === last_mult) {\n        return null\n      }\n      //support 'hundred thousand'\n      //this one is tricky..\n      if (mult === 100 && terms[i + 1] !== undefined) {\n        const w2 = terms[i + 1]\n        if (words.multiples[w2]) {\n          mult *= words.multiples[w2] //hundredThousand/hundredMillion\n          i += 1\n        }\n      }\n      //natural order of things\n      //five thousand, one hundred..\n      if (last_mult === null || mult < last_mult) {\n        sum += (section_sum(has) || 1) * mult\n        last_mult = mult\n        has = {}\n      } else {\n        //maybe hundred .. thousand\n        sum += section_sum(has)\n        last_mult = mult\n        sum = (sum || 1) * mult\n        has = {}\n      }\n    }\n  }\n  //dump the remaining has values\n  sum += section_sum(has)\n  //post-process add modifier\n  sum *= modifier.amount\n  sum *= isNegative ? -1 : 1\n  //dont return 0, if it went straight-through\n  if (sum === 0 && Object.keys(has).length === 0) {\n    return null\n  }\n  return sum\n}\n\nmodule.exports = parse\n","const endS = /s$/\nconst parseText = require('../numbers/convert/toNumber')\n\n// just using .toNumber() again may risk an infinite-loop\nconst parseNumber = function (m) {\n  let str = m.text('reduced')\n  return parseText(str)\n}\n\nlet mapping = {\n  half: 2,\n  halve: 2,\n  quarter: 4,\n}\n\nconst slashForm = function (m) {\n  let str = m.text('reduced')\n  let found = str.match(/^([-+]?[0-9]+)\\/([-+]?[0-9]+)(st|nd|rd|th)?s?$/)\n  if (found && found[1] && found[0]) {\n    return {\n      numerator: Number(found[1]),\n      denominator: Number(found[2]),\n    }\n  }\n  return null\n}\n\n// parse '4 out of 4'\nconst nOutOfN = function (m) {\n  let found = m.match('[<num>#Value+] out of every? [<den>#Value+]')\n  if (found.found !== true) {\n    return null\n  }\n  let { num, den } = found.groups()\n  // num = num.numbers().get(0)\n  // den = den.numbers().get(0)\n  num = parseNumber(num)\n  den = parseNumber(den)\n  if (typeof num === 'number' && typeof den === 'number') {\n    return {\n      numerator: num,\n      denominator: den,\n    }\n  }\n  return null\n}\n\n// parse 'five thirds'\nconst nOrinalth = function (m) {\n  let found = m.match('[<num>(#Cardinal|a)+] [<dem>#Fraction+]')\n  if (found.found !== true) {\n    return null\n  }\n  let { num, dem } = found.groups()\n  // -- parse numerator---\n  // quick-support for 'a third'\n  if (num.has('a')) {\n    num = 1\n  } else {\n    // abuse the number-parser for 'thirty three'\n    // let tmp = num.clone().unTag('Fraction')\n    // num = tmp.numbers().get(0)\n    num = parseNumber(num)\n  }\n  // -- parse denominator --\n  // turn 'thirds' into third\n  let str = dem.text('reduced')\n  if (endS.test(str)) {\n    str = str.replace(endS, '')\n    dem.replaceWith(str)\n  }\n  // support 'one half' as '1/2'\n  if (mapping.hasOwnProperty(str)) {\n    dem = mapping[str]\n  } else {\n    // dem = dem.numbers().get(0)\n    dem = parseNumber(dem)\n  }\n  if (typeof num === 'number' && typeof dem === 'number') {\n    return {\n      numerator: num,\n      denominator: dem,\n    }\n  }\n  return null\n}\n\n// implied 1 in '100th of a', 'fifth of a'\nconst oneNth = function (m) {\n  let found = m.match('^#Ordinal$')\n  if (found.found !== true) {\n    return null\n  }\n  // ensure it's '100th of a '\n  if (m.lookAhead('^of .')) {\n    // let num = found.numbers().get(0)\n    let num = parseNumber(found)\n    return {\n      numerator: 1,\n      denominator: num,\n    }\n  }\n  return null\n}\n\n// 'half'\nconst named = function (m) {\n  let str = m.text('reduced')\n  if (mapping.hasOwnProperty(str)) {\n    return { numerator: 1, denominator: mapping[str] }\n  }\n  return null\n}\n\nconst round = (n) => {\n  let rounded = Math.round(n * 1000) / 1000\n  // don't round 1 millionth down into 0\n  if (rounded === 0 && n !== 0) {\n    return n\n  }\n  return rounded\n}\n\nconst parseFraction = function (m) {\n  m = m.clone()\n  let res = named(m) || slashForm(m) || nOutOfN(m) || nOrinalth(m) || oneNth(m) || null\n  if (res !== null) {\n    // do the math\n    if (res.numerator && res.denominator) {\n      res.decimal = res.numerator / res.denominator\n      res.decimal = round(res.decimal)\n    }\n  }\n  return res\n}\nmodule.exports = parseFraction\n","const parseText = require('./convert/toNumber')\nconst parseFraction = require('../fractions/parse')\n\nconst parseNumeric = function (str, p, isFraction) {\n  str = str.replace(/,/g, '')\n  //parse a numeric-number (easy)\n  let arr = str.split(/^([^0-9]*)([0-9.,]*)([^0-9]*)$/)\n  if (arr && arr[2] && p.terms().length < 2) {\n    let num = parseFloat(arr[2] || str)\n    //ensure that num is an actual number\n    if (typeof num !== 'number') {\n      num = null\n    }\n    // strip an ordinal off the suffix\n    let suffix = arr[3] || ''\n    if (suffix === 'st' || suffix === 'nd' || suffix === 'rd' || suffix === 'th') {\n      suffix = ''\n    }\n    // support M for million, k for thousand\n    if (suffix === 'm' || suffix === 'M') {\n      num *= 1000000\n      suffix = ''\n    }\n    if (suffix === 'k' || suffix === 'k') {\n      num *= 1000\n      suffix = ''\n    }\n    num = isFraction ? 1 / num : num\n    return {\n      prefix: arr[1] || '',\n      num: num,\n      suffix: suffix,\n    }\n  }\n  return null\n}\n\n// get a numeric value from this phrase\nconst parseNumber = function (m) {\n  let str = m.text('reduced')\n  // is it in '3,123' format?\n  let hasComma = /[0-9],[0-9]/.test(m.text('text'))\n  // parse a numeric-number like '$4.00'\n  let res = parseNumeric(str, m)\n  if (res !== null) {\n    res.hasComma = hasComma\n    return res\n  }\n  // -- parse text-formats --\n  // Fractions: remove 'and a half' etc. from the end\n  let frPart = m.match('#Fraction #Fraction+$')\n  frPart = frPart.found === false ? m.match('^#Fraction$') : frPart\n  let fraction = null\n  if (frPart.found) {\n    // fraction = frPart.fractions().get(0)\n    fraction = parseFraction(frPart)\n    // remove it from our string\n    m = m.not(frPart)\n    m = m.not('and$')\n    str = m.text('reduced')\n  }\n  let num = 0\n  if (str) {\n    num = parseText(str) || 0\n  }\n  // apply numeric fraction\n  if (fraction && fraction.decimal) {\n    num += fraction.decimal\n  }\n  return {\n    hasComma: hasComma,\n    prefix: '',\n    num: num,\n    suffix: '',\n  }\n}\nmodule.exports = parseNumber\n","// handle 'one bottle', 'two bottles'\nconst agreeUnits = function (agree, val, obj) {\n  if (agree === false) {\n    return\n  }\n  let unit = val.lookAhead('^(#Unit|#Noun)')\n  // don't do these\n  if (unit.has('(#Address|#Money|#Percent)') || val.has('#Ordinal')) {\n    return\n  }\n  if (obj.num === 1) {\n    unit.nouns().toSingular()\n  } else if (unit.has('#Singular')) {\n    unit.nouns().toPlural()\n  }\n}\nmodule.exports = agreeUnits\n","/**\n * turn big numbers, like 2.3e+22, into a string with a ton of trailing 0's\n * */\nconst numToString = function(n) {\n  if (n < 1000000) {\n    return String(n)\n  }\n  let str\n  if (typeof n === 'number') {\n    str = n.toFixed(0)\n  } else {\n    str = n\n  }\n  if (str.indexOf('e+') === -1) {\n    return str\n  }\n  return str\n    .replace('.', '')\n    .split('e+')\n    .reduce(function(p, b) {\n      return p + Array(b - p.length + 2).join(0)\n    })\n}\nmodule.exports = numToString\n// console.log(numToString(2.5e+22));\n","const toString = require('../_toString')\n/**\n * turns an integer/float into.ber, like 'fifty-five'\n */\n\nconst tens_mapping = [\n  ['ninety', 90],\n  ['eighty', 80],\n  ['seventy', 70],\n  ['sixty', 60],\n  ['fifty', 50],\n  ['forty', 40],\n  ['thirty', 30],\n  ['twenty', 20],\n]\nconst ones_mapping = [\n  '',\n  'one',\n  'two',\n  'three',\n  'four',\n  'five',\n  'six',\n  'seven',\n  'eight',\n  'nine',\n  'ten',\n  'eleven',\n  'twelve',\n  'thirteen',\n  'fourteen',\n  'fifteen',\n  'sixteen',\n  'seventeen',\n  'eighteen',\n  'nineteen',\n]\n\nconst sequence = [\n  [1e24, 'septillion'],\n  [1e20, 'hundred sextillion'],\n  [1e21, 'sextillion'],\n  [1e20, 'hundred quintillion'],\n  [1e18, 'quintillion'],\n  [1e17, 'hundred quadrillion'],\n  [1e15, 'quadrillion'],\n  [1e14, 'hundred trillion'],\n  [1e12, 'trillion'],\n  [1e11, 'hundred billion'],\n  [1e9, 'billion'],\n  [1e8, 'hundred million'],\n  [1e6, 'million'],\n  [100000, 'hundred thousand'],\n  [1000, 'thousand'],\n  [100, 'hundred'],\n  [1, 'one'],\n]\n\n//turn number into an array of magnitudes, like [[5, million], [2, hundred]]\nconst breakdown_magnitudes = function(num) {\n  let working = num\n  let have = []\n  sequence.forEach(a => {\n    if (num >= a[0]) {\n      let howmany = Math.floor(working / a[0])\n      working -= howmany * a[0]\n      if (howmany) {\n        have.push({\n          unit: a[1],\n          count: howmany,\n        })\n      }\n    }\n  })\n  return have\n}\n\n//turn numbers from 100-0 into their text\nconst breakdown_hundred = function(num) {\n  let arr = []\n  if (num > 100) {\n    return arr //something bad happened..\n  }\n  for (let i = 0; i < tens_mapping.length; i++) {\n    if (num >= tens_mapping[i][1]) {\n      num -= tens_mapping[i][1]\n      arr.push(tens_mapping[i][0])\n    }\n  }\n  //(hopefully) we should only have 20-0 now\n  if (ones_mapping[num]) {\n    arr.push(ones_mapping[num])\n  }\n  return arr\n}\n\n/** print-out 'point eight nine'*/\nconst handle_decimal = num => {\n  const names = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n  let arr = []\n  //parse it out like a string, because js math is such shit\n  let str = toString(num)\n  let decimal = str.match(/\\.([0-9]+)/)\n  if (!decimal || !decimal[0]) {\n    return arr\n  }\n  arr.push('point')\n  let decimals = decimal[0].split('')\n  for (let i = 0; i < decimals.length; i++) {\n    arr.push(names[decimals[i]])\n  }\n  return arr\n}\n\n/** turns an integer into a textual number */\nconst to_text = function(num) {\n  // handle zero, quickly\n  if (num === 0 || num === '0') {\n    return 'zero' // no?\n  }\n  //big numbers, north of sextillion, aren't gonna work well..\n  //keep them small..\n  if (num > 1e21) {\n    num = toString(num)\n  }\n  let arr = []\n  //handle negative numbers\n  if (num < 0) {\n    arr.push('minus')\n    num = Math.abs(num)\n  }\n  //break-down into units, counts\n  let units = breakdown_magnitudes(num)\n  //build-up the string from its components\n  for (let i = 0; i < units.length; i++) {\n    let unit_name = units[i].unit\n    if (unit_name === 'one') {\n      unit_name = ''\n      //put an 'and' in here\n      if (arr.length > 1) {\n        arr.push('and')\n      }\n    }\n    arr = arr.concat(breakdown_hundred(units[i].count))\n    arr.push(unit_name)\n  }\n  //also support decimals - 'point eight'\n  arr = arr.concat(handle_decimal(num))\n  //remove empties\n  arr = arr.filter(s => s)\n  if (arr.length === 0) {\n    arr[0] = ''\n  }\n  return arr.join(' ')\n}\n\nmodule.exports = to_text\n\n// console.log(to_text(-1000.8));\n","const toString = require('../_toString')\n\n/**\n * turn a number like 5 into an ordinal like 5th\n */\nconst numOrdinal = function(num) {\n  if (!num && num !== 0) {\n    return null\n  }\n  //the teens are all 'th'\n  let tens = num % 100\n  if (tens > 10 && tens < 20) {\n    return String(num) + 'th'\n  }\n  //the rest of 'em\n  const mapping = {\n    0: 'th',\n    1: 'st',\n    2: 'nd',\n    3: 'rd',\n  }\n  let str = toString(num)\n  let last = str.slice(str.length - 1, str.length)\n  if (mapping[last]) {\n    str += mapping[last]\n  } else {\n    str += 'th'\n  }\n  return str\n}\n\nmodule.exports = numOrdinal\n","const textValue = require('../toText')\n// const toString = require('../_toString')\n\nconst irregulars = {\n  one: 'first',\n  two: 'second',\n  three: 'third',\n  five: 'fifth',\n  eight: 'eighth',\n  nine: 'ninth',\n  twelve: 'twelfth',\n  twenty: 'twentieth',\n  thirty: 'thirtieth',\n  forty: 'fortieth',\n  fourty: 'fourtieth',\n  fifty: 'fiftieth',\n  sixty: 'sixtieth',\n  seventy: 'seventieth',\n  eighty: 'eightieth',\n  ninety: 'ninetieth',\n}\n\n/**\n * convert a javascript number to 'twentieth' format\n * */\nconst textOrdinal = num => {\n  let words = textValue(num).split(' ')\n  //convert the last number to an ordinal\n  let last = words[words.length - 1]\n  if (irregulars.hasOwnProperty(last)) {\n    words[words.length - 1] = irregulars[last]\n  } else {\n    words[words.length - 1] = last.replace(/y$/, 'i') + 'th'\n  }\n  return words.join(' ')\n}\n\nmodule.exports = textOrdinal\n","const prefixes = {\n  '¢': 'cents',\n  $: 'dollars',\n  '£': 'pounds',\n  '¥': 'yen',\n  '€': 'euros',\n  '₡': 'colón',\n  '฿': 'baht',\n  '₭': 'kip',\n  '₩': 'won',\n  '₹': 'rupees',\n  '₽': 'ruble',\n  '₺': 'liras',\n}\nconst suffixes = {\n  '%': 'percent',\n  s: 'seconds',\n  cm: 'centimetres',\n  km: 'kilometres',\n}\nmodule.exports = {\n  prefixes: prefixes,\n  suffixes: suffixes,\n}\n","const toString = require('./_toString')\nconst toText = require('./toText')\nconst numOrdinal = require('./toOrdinal/numOrdinal')\nconst textOrdinal = require('./toOrdinal/textOrdinal')\nconst symbols = require('./_symbols')\nconst prefixes = symbols.prefixes\nconst suffixes = symbols.suffixes\n\nconst isCurrency = {\n  usd: true,\n  eur: true,\n  jpy: true,\n  gbp: true,\n  cad: true,\n  aud: true,\n  chf: true,\n  cny: true,\n  hkd: true,\n  nzd: true,\n  kr: true,\n  rub: true,\n}\n// convert $ to 'dollars', etc\nconst prefixToText = function (obj) {\n  // turn 5% to 'five percent'\n  if (prefixes.hasOwnProperty(obj.prefix)) {\n    obj.suffix += prefixes[obj.prefix]\n    obj.prefix = ''\n  }\n  //turn 5km to 'five kilometres'\n  if (suffixes.hasOwnProperty(obj.suffix)) {\n    obj.suffix = suffixes[obj.suffix]\n  }\n  //uppercase lost case for 'USD', etc\n  if (isCurrency.hasOwnProperty(obj.suffix)) {\n    obj.suffix = obj.suffix.toUpperCase()\n  }\n  // add a space, if it exists\n  if (obj.suffix) {\n    obj.suffix = ' ' + obj.suffix\n  }\n  return obj\n}\n\n//business-logic for converting a cardinal-number to other forms\nconst makeNumber = function (obj, isText, isOrdinal) {\n  let num = String(obj.num)\n  if (isText) {\n    obj = prefixToText(obj)\n    if (isOrdinal) {\n      //ordinal-text\n      num = textOrdinal(num)\n      return `${obj.prefix || ''}${num}${obj.suffix || ''}`\n    }\n    //cardinal-text\n    num = toText(num)\n    return `${obj.prefix || ''}${num}${obj.suffix || ''}`\n  }\n  //ordinal-number\n  if (isOrdinal) {\n    num = numOrdinal(num)\n    // support '5th percent'\n    obj = prefixToText(obj)\n    return `${obj.prefix || ''}${num}${obj.suffix || ''}`\n  }\n  // support comma format\n  if (obj.hasComma === true) {\n    num = obj.num.toLocaleString()\n  }\n  // cardinal-number\n  num = toString(num) // support very large numbers\n  return `${obj.prefix || ''}${num}${obj.suffix || ''}`\n}\nmodule.exports = makeNumber\n","const parseNumber = require('./parse')\nconst agreeUnits = require('./_agreeUnits')\nconst makeNumber = require('./convert/makeNumber')\nconst toNumber = require('./convert/toNumber')\n\nlet methods = {\n  /** overloaded json method with additional number information */\n  json: function (options) {\n    let n = null\n    if (typeof options === 'number') {\n      n = options\n      options = null\n    }\n    options = options || { text: true, normal: true, trim: true, terms: true }\n    let res = []\n    this.forEach((doc) => {\n      let json = doc.json(options)[0]\n      let obj = parseNumber(doc)\n      json.prefix = obj.prefix\n      json.number = obj.num\n      json.suffix = obj.suffix\n      json.cardinal = makeNumber(obj, false, false)\n      json.ordinal = makeNumber(obj, false, true)\n      json.textCardinal = makeNumber(obj, true, false)\n      json.textOrdinal = makeNumber(obj, true, true)\n      res.push(json)\n    })\n    if (n !== null) {\n      return res[n]\n    }\n    return res\n  },\n  /** two of what? */\n  units: function () {\n    let m = this.lookAhead('(#Unit|#Noun)+')\n    m = m.splitAfter('@hasComma').first()\n    m = m.not('#Pronoun')\n    return m.first()\n  },\n  /** return only ordinal numbers */\n  isOrdinal: function () {\n    return this.if('#Ordinal')\n  },\n  /** return only cardinal numbers*/\n  isCardinal: function () {\n    return this.if('#Cardinal')\n  },\n  /** convert to numeric form like '8' or '8th' */\n  toNumber: function () {\n    this.forEach((val) => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, false, val.has('#Ordinal'))\n      val.replaceWith(str, true)\n      val.tag('NumericValue')\n    })\n    return this\n  },\n  /** add commas, or nicer formatting for numbers */\n  toLocaleString: function () {\n    this.forEach((val) => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      obj.num = obj.num.toLocaleString()\n      let str = makeNumber(obj, false, val.has('#Ordinal'))\n      val.replaceWith(str, true)\n    })\n    return this\n  },\n  /** convert to text form - like 'eight' or 'eigth'*/\n  toText: function () {\n    this.forEach((val) => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, true, val.has('#Ordinal'))\n      val.replaceWith(str, true)\n      val.tag('TextValue')\n    })\n    return this\n  },\n  /** convert to cardinal form, like 'eight', or '8' */\n  toCardinal: function (agree) {\n    let m = this.if('#Ordinal')\n    m.forEach((val) => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, val.has('#TextValue'), false)\n      // a hack for number-ranges\n      if (val.has('#NumberRange')) {\n        let t = val.termList()[0]\n        if (t.text && t.post === '') {\n          t.post = ' '\n        }\n      }\n      // change the number text\n      val.replaceWith(str, true)\n      val.tag('Cardinal')\n      // turn unit into plural -> 'seven beers'\n      agreeUnits(agree, val, obj)\n    })\n    return this\n  },\n  /** convert to ordinal form, like 'eighth', or '8th' */\n  toOrdinal: function () {\n    let m = this.if('#Cardinal')\n    m.forEach((val) => {\n      let obj = parseNumber(val)\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, val.has('#TextValue'), true)\n      // a hack for number-ranges\n      if (val.has('#NumberRange')) {\n        let t = val.termList()[0]\n        if (t.text && t.post === '') {\n          t.post = ' '\n        }\n      }\n      // change the number text\n      val.replaceWith(str, true)\n      val.tag('Ordinal')\n      // turn unit into singular -> 'seventh beer'\n      let unit = this.lookAhead('^#Plural')\n      if (unit.found) {\n        unit.nouns().toSingular()\n      }\n    })\n    return this\n  },\n  /** return only numbers that are == n */\n  isEqual: function (n) {\n    return this.filter((val) => {\n      let num = parseNumber(val).num\n      return num === n\n    })\n  },\n  /** return only numbers that are > n*/\n  greaterThan: function (n) {\n    return this.filter((val) => {\n      let num = parseNumber(val).num\n      return num > n\n    })\n  },\n  /** return only numbers that are < n*/\n  lessThan: function (n) {\n    return this.filter((val) => {\n      let num = parseNumber(val).num\n      return num < n\n    })\n  },\n  /** return only numbers > min and < max */\n  between: function (min, max) {\n    return this.filter((val) => {\n      let num = parseNumber(val).num\n      return num > min && num < max\n    })\n  },\n  /** set these number to n */\n  set: function (n, agree) {\n    if (n === undefined) {\n      return this // don't bother\n    }\n    if (typeof n === 'string') {\n      n = toNumber(n)\n    }\n    this.forEach((val) => {\n      let obj = parseNumber(val)\n      obj.num = n\n      if (obj.num === null) {\n        return\n      }\n      let str = makeNumber(obj, val.has('#TextValue'), val.has('#Ordinal'))\n      val = val.not('#Currency')\n      val.replaceWith(str, true)\n      // handle plural/singular unit\n      agreeUnits(agree, val, obj)\n    })\n    return this\n  },\n  add: function (n, agree) {\n    if (!n) {\n      return this // don't bother\n    }\n    if (typeof n === 'string') {\n      n = toNumber(n)\n    }\n    this.forEach((val) => {\n      let obj = parseNumber(val)\n\n      if (obj.num === null) {\n        return\n      }\n      obj.num += n\n      let str = makeNumber(obj, val.has('#TextValue'), val.has('#Ordinal'))\n      val = val.not('#Currency')\n      val.replaceWith(str, true)\n      // handle plural/singular unit\n      agreeUnits(agree, val, obj)\n    })\n    return this\n  },\n  /** decrease each number by n*/\n  subtract: function (n, agree) {\n    return this.add(n * -1, agree)\n  },\n  /** increase each number by 1 */\n  increment: function (agree) {\n    this.add(1, agree)\n    return this\n  },\n  /** decrease each number by 1 */\n  decrement: function (agree) {\n    this.add(-1, agree)\n    return this\n  },\n  /** return things like CCXX*/\n  romanNumerals: function (n) {\n    let m = this.match('#RomanNumeral').numbers()\n    if (typeof n === 'number') {\n      m = m.get(n)\n    }\n    return m\n  },\n  /** split-apart suffix and number */\n  normalize: function () {\n    const keep = {\n      '%': true,\n    }\n    this.forEach((val) => {\n      let obj = parseNumber(val)\n      if (obj.num !== null && obj.suffix && keep[obj.suffix] !== true) {\n        let prefix = obj.prefix || ''\n        val = val.replaceWith(prefix + obj.num + ' ' + obj.suffix)\n        return\n      }\n    })\n    return this\n  },\n  /** retrieve the parsed number */\n  get: function (n) {\n    let arr = []\n    this.forEach((doc) => {\n      arr.push(parseNumber(doc).num)\n    })\n    if (n !== undefined) {\n      return arr[n] || null\n    }\n    return arr || null\n  },\n}\n// aliases\nmethods.toNice = methods.toLocaleString\nmethods.isBetween = methods.between\nmethods.minus = methods.subtract\nmethods.plus = methods.add\nmethods.equals = methods.isEqual\n\nmodule.exports = methods\n","const parseNumber = require('../numbers/parse')\n\nconst parse = function (m) {\n  let num = parseNumber(m).num\n  if (typeof num === 'number') {\n    return num / 100\n  }\n  return null\n}\n\nmodule.exports = {\n  /** get the money info */\n  get: function (n) {\n    let arr = []\n    this.forEach((doc) => {\n      let num = parse(doc)\n      if (num !== null) {\n        arr.push(num)\n      }\n    })\n    if (n !== undefined) {\n      return arr[n] || null\n    }\n    return arr || null\n  },\n\n  /** overloaded json method with additional number information */\n  json: function (options) {\n    let n = null\n    if (typeof options === 'number') {\n      n = options\n      options = null\n    }\n    options = options || { text: true, normal: true, trim: true, terms: true }\n    let res = []\n    this.forEach((m) => {\n      let json = m.json(options)[0]\n      let dec = parse(m)\n      json.number = dec\n      if (dec !== null) {\n        let full = dec * 100\n        json.textNumber = `${full} percent`\n        json.cardinal = `${full}%`\n      }\n      res.push(json)\n    })\n    if (n !== null) {\n      return res[n] || {}\n    }\n    return res\n  },\n  // turn 80% to 8/100\n  toFraction: function () {\n    this.forEach((doc) => {\n      let num = parse(doc)\n      if (num !== null) {\n        num *= 100\n        num = Math.round(num * 100) / 100\n        let str = `${num}/100`\n        this.replace(doc, str)\n      }\n    })\n    return this\n  },\n}\n","//from wikipedia's {{infobox currency}}, Dec 2020\nmodule.exports = [\n  {\n    dem: 'american',\n    name: 'dollar',\n    iso: 'usd',\n    sub: 'cent',\n    sym: ['$', 'US$', 'U$'],\n  },\n  { name: 'euro', iso: 'eur', sub: 'cent', sym: ['€'] },\n  {\n    dem: 'british',\n    name: 'pound',\n    iso: 'gbp',\n    sub: 'penny',\n    alias: { sterling: true },\n    sym: ['£'],\n  },\n  {\n    name: 'renminbi',\n    iso: 'cny',\n    plural: 'yuán',\n    // sub: 'yuán',\n    alias: { yuan: true },\n    sym: ['元'], //'¥'\n  },\n  {\n    dem: 'japanese',\n    name: 'yen',\n    iso: 'jpy',\n    sub: 'sen',\n    sym: ['¥', '円', '圓'],\n  },\n\n  // kr\n  {\n    dem: 'swedish',\n    name: 'krona',\n    iso: 'sek',\n    sub: 'öre',\n    alias: { ore: true, kronor: true },\n    sym: ['kr'],\n  },\n  {\n    dem: 'estonian',\n    name: 'kroon',\n    iso: 'eek',\n    sub: 'sent',\n    sym: ['kr'],\n  },\n  {\n    dem: 'norwegian',\n    name: 'krone',\n    iso: 'nok',\n    sub: 'øre',\n    sym: ['kr'],\n  },\n  { dem: 'icelandic', name: 'króna', iso: 'isk', sym: ['kr'] },\n  { dem: 'danish', name: 'krone', iso: 'dkk', sub: 'øre', sym: ['kr.'] },\n  // {\n  //   dem: 'scandinavian',\n  //   name: 'Monetary Union',\n  //   sub: 'øre',\n  //   sym: ['kr.'],\n  // },\n\n  // 'k'\n  {\n    dem: 'zambian',\n    name: 'kwacha',\n    iso: 'zmw',\n    sub: 'ngwee',\n    sym: ['K'],\n  },\n  {\n    dem: 'malawian',\n    name: 'kwacha',\n    iso: 'mwk',\n    sub: 'tambala',\n    sym: ['K'],\n  },\n\n  // misc\n\n  {\n    dem: 'greek',\n    name: 'drachma',\n    iso: 'grd',\n    sub: 'leptοn',\n    sym: ['Δρχ.', 'Δρ.', '₯'],\n  },\n  {\n    dem: 'eastern caribbean',\n    name: 'dollar',\n    iso: 'xcd',\n    sub: 'cent',\n    sym: ['$'],\n  },\n  {\n    dem: 'finnish',\n    name: 'markka',\n    iso: 'fim',\n    sub: 'penni',\n    sym: ['mk'],\n  },\n\n  { dem: 'polish', name: 'złoty', iso: 'pln', sub: 'grosz', sym: ['zł'] },\n  {\n    dem: 'slovenian',\n    name: 'tolar',\n    iso: 'sit',\n    sub: 'stotin',\n    sym: [],\n  },\n\n  {\n    dem: 'australian',\n    name: 'dollar',\n    iso: 'aud',\n    sub: 'cent',\n    sym: ['$', 'A$', 'AU$'],\n  },\n  {\n    dem: 'deutsche',\n    name: 'mark',\n    iso: 'dem',\n    sub: 'pfennig',\n    sym: ['DM'],\n  },\n  { dem: 'thai', name: 'baht', iso: 'thb', sub: 'satang', sym: ['฿'] },\n  {\n    dem: 'canadian',\n    name: 'dollar',\n    iso: 'cad',\n    sub: 'cent',\n    sym: ['$', 'Can$', 'C$', 'CA$', 'CAD'],\n  },\n  {\n    dem: 'mexican',\n    name: 'peso',\n    iso: 'mxn',\n    sub: 'centavo',\n    sym: ['$', 'Mex$'],\n  },\n  {\n    dem: 'spanish',\n    name: 'peseta',\n    iso: 'esp',\n    sub: 'céntimo',\n    sym: ['Pta'],\n  },\n  {\n    dem: 'new zealand',\n    name: 'dollar',\n    iso: 'nzd',\n    sub: 'cent',\n    sym: ['$', 'NZ$'],\n  },\n  {\n    dem: 'chilean',\n    name: 'peso',\n    iso: 'clp',\n    sub: 'centavo',\n    sym: ['Cifrão', '$'],\n  },\n  { dem: 'nigerian', name: 'naira', iso: 'ngn', sub: 'kobo', sym: ['₦'] },\n  {\n    dem: 'austrian',\n    name: 'schilling',\n    iso: 'ats',\n    sub: 'groschen',\n    sym: ['S', 'öS'],\n  },\n\n  {\n    dem: 'guatemalan',\n    name: 'quetzal',\n    iso: 'gtq',\n    sub: 'centavo',\n    sym: ['Q'],\n  },\n  {\n    dem: 'philippine',\n    name: 'peso',\n    iso: 'php',\n    sub: 'sentimo',\n    sym: ['₱'],\n  },\n  {\n    dem: 'hungarian',\n    name: 'forint',\n    iso: 'huf',\n    // sub: 'fillér',\n    sym: ['Ft'],\n  },\n  {\n    dem: 'russian',\n    name: 'ruble',\n    iso: 'rub',\n    sub: 'kopeyka',\n    sym: ['₽', 'руб', 'р.'],\n  },\n  {\n    dem: 'kuwaiti',\n    name: 'dinar',\n    iso: 'kwd',\n    sub: 'fils',\n    sym: ['د.ك', 'KD'],\n  },\n  {\n    dem: 'israeli',\n    name: 'new shekel',\n    iso: 'ils',\n    sub: 'agora',\n    sym: ['₪'],\n  },\n  {\n    dem: 'latvian',\n    name: 'lats',\n    iso: 'lvl',\n    sub: 'santīms',\n    sym: ['Ls'],\n  },\n  {\n    dem: 'kazakhstani',\n    name: 'tenge',\n    iso: 'kzt',\n    sub: 'tıyn',\n    sym: ['₸'],\n  },\n  { dem: 'iraqi', name: 'dinar', iso: 'iqd', sub: 'fils', sym: ['د.ع'] },\n  {\n    dem: 'bahamian',\n    name: 'dollar',\n    iso: 'bsd',\n    sub: 'cent',\n    sym: ['$', 'B$'],\n  },\n  {\n    dem: 'seychellois',\n    name: 'rupee',\n    iso: 'scr',\n    sub: 'cent',\n    sym: ['SCR', 'SR'],\n  },\n  {\n    dem: 'albanian',\n    name: 'lek',\n    iso: 'all',\n    sub: 'qindarkë',\n    sym: ['L'],\n  },\n  {\n    dem: 'bulgarian',\n    name: 'lev',\n    iso: 'bgn',\n    sub: 'stotinka',\n    sym: ['лв.'],\n  },\n  {\n    dem: 'irish',\n    name: 'pound',\n    iso: 'iep',\n    sym: ['£', 'IR£'],\n  },\n  { name: 'cfp franc', iso: 'xpf', sym: ['f'] },\n  {\n    dem: 'south african',\n    name: 'rand',\n    iso: 'zar',\n    sub: 'cent',\n    sym: ['R'],\n  },\n  {\n    dem: 'south korean',\n    name: 'won',\n    iso: 'krw',\n    sub: 'jeon',\n    plural: 'won',\n    sym: ['₩'],\n  },\n  {\n    dem: 'north korean',\n    name: 'won',\n    iso: 'kpw',\n    sub: 'chon',\n    plural: 'won',\n    sym: ['₩'],\n  },\n\n  {\n    dem: 'portuguese',\n    name: 'escudo',\n    iso: 'pte',\n    sub: 'centavo',\n    sym: [],\n  },\n  {\n    dem: 'ghanaian',\n    name: 'cedi',\n    iso: 'ghs',\n    sub: 'pesewa',\n    sym: ['GH₵'],\n  },\n  {\n    dem: 'hong kong',\n    name: 'dollar',\n    iso: 'hkd',\n    sub: '毫',\n    sym: ['$'],\n  },\n  {\n    dem: 'new taiwan',\n    name: 'dollar',\n    iso: 'twd',\n    sub: 'dime',\n    sym: ['NT$'],\n  },\n\n  {\n    dem: 'east german',\n    name: 'mark',\n    iso: 'ddm',\n    sub: 'pfennig',\n    sym: ['M'],\n  },\n  {\n    dem: 'namibian',\n    name: 'dollar',\n    iso: 'nad',\n    sub: 'cent',\n    sym: ['$'],\n  },\n  {\n    dem: 'malaysian',\n    name: 'ringgit',\n    iso: 'myr',\n    sub: 'sen',\n    sym: ['RM'],\n  },\n  {\n    dem: 'swiss',\n    name: 'franc',\n    iso: 'chf',\n    sym: ['Rp.'],\n  },\n  {\n    dem: 'panamanian',\n    name: 'balboa',\n    iso: 'pab',\n    sub: 'centésimo',\n    sym: ['B/.'],\n  },\n  {\n    dem: 'indonesian',\n    name: 'rupiah',\n    iso: 'idr',\n    sub: 'sen',\n    sym: ['Rp'],\n  },\n  {\n    dem: 'brunei',\n    name: 'dollar',\n    iso: 'bnd',\n    sub: 'sen',\n    sym: ['$', 'B$'],\n  },\n  {\n    dem: 'venezuelan',\n    name: 'bolívar',\n    iso: 'vef',\n    sub: 'céntimo',\n    sym: ['Bs.F', 'Bs.'],\n  },\n  {\n    dem: 'macedonian',\n    name: 'denar',\n    iso: 'mkd',\n    sub: 'deni',\n    sym: ['den'],\n  },\n  {\n    dem: 'mauritanian',\n    name: 'ouguiya',\n    iso: 'mru',\n    sub: 'khoums',\n    sym: ['UM'],\n  },\n  {\n    dem: 'argentine',\n    name: 'peso',\n    iso: 'ars',\n    sub: 'centavo',\n    sym: ['$'],\n  },\n  {\n    dem: 'libyan',\n    name: 'dinar',\n    iso: 'lyd',\n    sub: 'dirham',\n    sym: ['LD', 'ل.د'],\n  },\n  {\n    dem: 'jordanian',\n    name: 'dinar',\n    iso: 'jod',\n    sub: 'dirham',\n    sym: ['د.أ'],\n  },\n  {\n    dem: 'french',\n    name: 'franc',\n    iso: 'frf',\n    sub: 'centime',\n    sym: ['F', 'Fr', 'FF', '₣'],\n  },\n  {\n    dem: 'syrian',\n    name: 'pound',\n    iso: 'syp',\n    sub: 'piastre',\n    sym: ['LS', '£S'],\n  },\n  { dem: 'belize', name: 'dollar', iso: 'bzd', sub: 'cent', sym: ['$'] },\n  {\n    dem: 'saudi',\n    name: 'riyal',\n    iso: 'sar',\n    sub: 'halalah',\n    sym: ['SAR', 'ر.س', ' ﷼'],\n  },\n  {\n    dem: 'surinamese',\n    name: 'dollar',\n    iso: 'srd',\n    sub: 'cent',\n    sym: ['$'],\n  },\n  {\n    dem: 'singapore',\n    name: 'dollar',\n    iso: 'sgd',\n    sub: 'cent',\n    sym: ['S$', '$'],\n  },\n  {\n    dem: 'nepalese',\n    name: 'rupee',\n    iso: 'npr',\n    sub: 'paisa',\n    sym: ['रु ₨', 'Re'],\n  },\n  // {\n  //   dem: 'macanese',\n  //   name: 'pataca',\n  //   iso: 'mop',\n  //   sub: 'ho',\n  //   sym: ['MOP$'],\n  // },\n  {\n    dem: 'nicaraguan',\n    name: 'córdoba',\n    iso: 'nio',\n    sub: 'centavo',\n    sym: ['C$'],\n  },\n  {\n    dem: 'bangladeshi',\n    name: 'taka',\n    iso: 'bdt',\n    sub: 'poysha',\n    sym: ['৳'],\n  },\n  {\n    dem: 'indian',\n    name: 'rupee',\n    iso: 'inr',\n    sub: 'paisa',\n    sym: ['₹'],\n  },\n  {\n    dem: 'maldivian',\n    name: 'rufiyaa',\n    iso: 'mvr',\n    sub: 'laari',\n    sym: ['Rf', 'MRf', 'MVR', '.ރ '],\n  },\n  {\n    dem: 'sri lankan',\n    name: 'rupee',\n    iso: 'lkr',\n    sub: 'cents',\n    sym: ['Rs', 'රු', 'ரூ'],\n  },\n  {\n    dem: 'bhutanese',\n    name: 'ngultrum',\n    iso: 'btn',\n    sub: 'chhertum',\n    sym: ['Nu.'],\n  },\n  {\n    dem: 'turkish',\n    name: 'lira',\n    iso: 'try',\n    sub: 'kuruş',\n    sym: ['YTL'],\n  },\n  {\n    dem: 'serbian',\n    name: 'dinar',\n    iso: 'rsd',\n    sub: 'para',\n    sym: ['din', 'дин'],\n  },\n  {\n    dem: 'bosnia and herzegovina',\n    name: 'convertible mark',\n    iso: 'bam',\n    sub: 'fening',\n    sym: ['KM'],\n  },\n  { dem: 'botswana', name: 'pula', iso: 'bwp', sub: 'thebe', sym: ['p'] },\n  {\n    dem: 'swazi',\n    name: 'lilangeni',\n    iso: 'szl',\n    sub: 'cent',\n    sym: ['L', 'E'],\n  },\n  {\n    dem: 'lithuanian',\n    name: 'litas',\n    iso: 'ltl',\n    sub: 'centas',\n    sym: ['Lt', 'ct'],\n  },\n  {\n    dem: 'mauritian',\n    name: 'rupee',\n    iso: 'mur',\n    sub: 'cent',\n    sym: ['₨'],\n  },\n  {\n    dem: 'pakistani',\n    name: 'rupee',\n    iso: 'pkr',\n    sub: 'paisa',\n    sym: ['₨'],\n  },\n  {\n    dem: 'maltese',\n    name: 'lira',\n    iso: 'mtl',\n    sub: 'cent',\n    sym: ['₤', 'Lm'],\n  },\n  { dem: 'cypriot', name: 'pound', iso: 'cyp', sub: 'cent', sym: ['£'] },\n  {\n    dem: 'moldovan',\n    name: 'leu',\n    iso: 'mdl',\n    // sub: 'ban',\n    sym: ['l'],\n  },\n  { dem: 'croatian', name: 'kuna', iso: 'hrk', sub: 'lipa', sym: ['kn'] },\n  {\n    dem: 'afghan',\n    name: 'afghani',\n    iso: 'afn',\n    sub: 'pul',\n    sym: ['؋', 'Af', 'Afs'],\n  },\n  {\n    dem: 'ecuadorian',\n    name: 'sucre',\n    iso: 'ecs',\n    sub: 'centavo',\n    sym: ['S/.'],\n  },\n  {\n    dem: 'sierra leonean',\n    name: 'leone',\n    iso: 'sll',\n    sub: 'cent',\n    sym: ['Le'],\n  },\n  // {\n  //\n  //   name: 'European Currency Unit',\n  //   iso: 'xeu',\n  //   sym: ['₠'],\n  // },\n  // {\n  //\n  //   name: 'Special drawing rights',\n  //   iso: 'xdr',\n  //   sym: ['SDR'],\n  // },\n  // {\n  //\n  //   name: 'Unidad de Valor Constante',\n  //   iso: 'ecv',\n  // },\n]\n","const currencies = require('./data/currencies')\nconst parseNumber = require('../numbers/parse')\n\n// const isPenny = `(cent|cents|penny|pennies|ore|sent|ngwee|tambala|penni|grosz|pfennig)`\n\n// aggregate currency symbols for easy lookup\n// const subs = {\n//   pennies: true,\n// }\nconst symbols = {}\n\nlet pennies = {}\ncurrencies.forEach((o) => {\n  o.sym.forEach((str) => {\n    symbols[str] = symbols[str] || o.iso\n  })\n  symbols[o.iso] = symbols[o.iso] || o.iso\n  if (o.sub) {\n    pennies[o.sub] = true\n  }\n})\n// create a match statement with all the penny-units\nlet isPenny = `(${Object.keys(pennies).join('|')})`\n\n// parse 'australian dollars'\nconst getNamedCurrency = function (doc) {\n  let m = doc.match('#Currency+')\n  m.nouns().toSingular() // 'dollars'➔'dollar'\n  let str = m.text('reduced')\n  return currencies.find((o) => {\n    // 'mexcan peso'\n    if (str === `${o.dem} ${o.name}`) {\n      return o\n    }\n    // 'CAD'\n    if (str === o.iso) {\n      return o\n    }\n    // 'cent'\n    if (str === o.sub) {\n      return o\n    }\n    // 'peso'\n    if (str === o.name) {\n      return o\n    }\n    // any other alt names\n    if (o.alias && o.alias[str] === true) {\n      return o\n    }\n    return false\n  })\n}\n\n// turn '£' into GBP\nconst getBySymbol = function (obj) {\n  // do suffix first, for '$50CAD'\n  if (obj.suffix && symbols.hasOwnProperty(obj.suffix)) {\n    return currencies.find((o) => o.iso === symbols[obj.suffix])\n  }\n  // parse prefix for '£50'\n  if (obj.prefix && symbols.hasOwnProperty(obj.prefix)) {\n    return currencies.find((o) => o.iso === symbols[obj.prefix])\n  }\n  return null\n}\n\n// five dollars and six cents -> 5.06\nconst parseMoney = function (doc) {\n  // support 'and five cents' as a decimal\n  let decimal = 0\n  let decimalEnd = doc.match(`and #Money+ ${isPenny}`)\n  if (decimalEnd.found) {\n    doc = doc.not(decimalEnd)\n    let res = parseNumber(decimalEnd.match('#Value+'))\n    if (res && res.num) {\n      decimal = res.num / 100\n    }\n  }\n  let res = parseNumber(doc)\n  let num = res.num || 0\n  num += decimal\n\n  let found = getBySymbol(res) || getNamedCurrency(doc) || {}\n  let sym = ''\n  if (found && found.sym) {\n    sym = found.sym[0]\n    // make '50 cents' -> 0.50\n    if (num && doc.has(`${isPenny}`)) {\n      num = num / 100\n    }\n  }\n  return {\n    num: num,\n    iso: found.iso,\n    demonym: found.dem,\n    currency: found.name,\n    plural: found.plural,\n    symbol: sym,\n  }\n}\nmodule.exports = parseMoney\n","const makeNumber = require('../numbers/convert/makeNumber')\nconst parseMoney = require('./parse')\n\nconst titleCase = function (str = '') {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  })\n}\n\nconst moneyMethods = {\n  /** get the money info */\n  get: function (n) {\n    let arr = []\n    this.forEach((doc) => {\n      arr.push(parseMoney(doc))\n    })\n    if (n !== undefined) {\n      return arr[n] || null\n    }\n    return arr || null\n  },\n  /** which currency is this money in? */\n  currency: function (n) {\n    let arr = []\n    this.forEach((doc) => {\n      let found = parseMoney(doc)\n      if (found) {\n        arr.push(found)\n      }\n    })\n    if (typeof n === 'number') {\n      return arr[n] || null\n    }\n    return arr || null\n  },\n\n  /** overloaded json method with additional number information */\n  json: function (options) {\n    let n = null\n    if (typeof options === 'number') {\n      n = options\n      options = null\n    }\n    options = options || { text: true, normal: true, trim: true, terms: true }\n    let res = []\n    this.forEach((doc) => {\n      let json = doc.json(options)[0]\n      let obj = parseMoney(doc)\n      json.number = obj.num\n      if (obj.iso) {\n        json.iso = obj.iso.toUpperCase()\n        json.symbol = obj.symbol\n        json.currency = titleCase(obj.demonym) + ' ' + titleCase(obj.currency)\n      }\n      // 'thirty pounds'\n      json.textFmt = makeNumber(obj, true, false)\n      if (obj.currency) {\n        let str = obj.currency\n        if (obj.num !== 1) {\n          str = obj.plural || str + 's'\n        }\n        json.textFmt += ' ' + str\n      }\n      res.push(json)\n    })\n    if (n !== null) {\n      return res[n] || {}\n    }\n    return res\n  },\n}\n\nmodule.exports = moneyMethods\n","const toText = require('../numbers/convert/toText')\nconst toOrdinal = require('../numbers/convert/toOrdinal/textOrdinal')\n// do some fraction-work\n\n// create 'one thirds' from {1,3}\nexports.toText = function (obj) {\n  // don't divide by zero!\n  if (!obj.numerator || !obj.denominator) {\n    return ''\n  }\n  // create [two] [fifths]\n  let start = toText(obj.numerator)\n  let end = toOrdinal(obj.denominator)\n  // 'one secondth' -> 'one half'\n  if (obj.denominator === 2) {\n    end = 'half'\n  }\n  if (start && end) {\n    if (obj.numerator !== 1) {\n      end += 's'\n    }\n    return `${start} ${end}`\n  }\n  return ''\n}\n\n// 'two out of three'\nexports.textCardinal = function (obj) {\n  if (!obj.numerator || !obj.denominator) {\n    return ''\n  }\n  let a = toText(obj.numerator)\n  let b = toText(obj.denominator)\n  return `${a} out of ${b}`\n}\n\n// create 1.33 from {1,3}\nexports.toDecimal = function (obj) {\n  return obj.decimal\n}\n","const parse = require('./parse')\nconst lib = require('./_lib')\n\nconst methods = {\n  get: function (n) {\n    let arr = []\n    this.forEach((doc) => {\n      arr.push(parse(doc))\n    })\n    if (n !== undefined) {\n      return arr[n] || null\n    }\n    return arr || null\n  },\n  // become 0.5\n  toDecimal() {\n    this.forEach((val) => {\n      let obj = parse(val)\n      if (obj) {\n        let num = lib.toDecimal(obj)\n        val.replaceWith(String(num), true)\n        val.tag('NumericValue')\n        val.unTag('Fraction')\n      }\n    })\n    return this\n  },\n  /** overloaded json method with additional number information */\n  json: function (options) {\n    let n = null\n    if (typeof options === 'number') {\n      n = options\n      options = null\n    }\n    options = options || { text: true, normal: true, trim: true, terms: true }\n    let res = []\n    this.forEach((m) => {\n      let json = m.json(options)[0]\n      let found = parse(m) || {}\n      let num = lib.toDecimal(found)\n      // let obj = parseNumber(m, m.has('#Fraction'))\n      json.numerator = found.numerator\n      json.denominator = found.denominator\n      json.number = num\n      json.textOrdinal = lib.toText(found)\n      json.textCardinal = lib.textCardinal(found)\n      res.push(json)\n    })\n    if (n !== null) {\n      return res[n] || {}\n    }\n    return res\n  },\n\n  /** change 'four out of 10' to 4/10 */\n  normalize: function () {\n    this.forEach((m) => {\n      let found = parse(m)\n      if (found && typeof found.numerator === 'number' && typeof found.denominator === 'number') {\n        let str = `${found.numerator}/${found.denominator}`\n        this.replace(m, str)\n      }\n    })\n    return this\n  },\n\n  // turn the fraction into 'five tenths'\n  toText: function (n) {\n    let arr = []\n    this.forEach((doc) => {\n      let obj = parse(doc) || {}\n      // create [one] [fifth]\n      let str = lib.toText(obj)\n      doc.replaceWith(str, true)\n      doc.tag('Fraction')\n    })\n    if (n !== undefined) {\n      return arr[n]\n    }\n    return arr\n  },\n\n  // turn 8/10 into 80%\n  toPercentage: function () {\n    this.forEach((m) => {\n      let found = parse(m)\n      if (found.decimal || found.decimal === 0) {\n        let num = found.decimal * 100\n        num = Math.round(num * 100) / 100\n        this.replace(m, `${num}%`)\n      }\n    })\n    return this\n  },\n}\n// aliases\nmethods.toNumber = methods.toDecimal\nmodule.exports = methods\n","const multiples =\n  '(hundred|thousand|million|billion|trillion|quadrillion|quintillion|sextillion|septillion)'\nconst here = 'fraction-tagger'\n\n// plural-ordinals like 'hundredths' are already tagged as Fraction by compromise\nconst tagFractions = function (doc) {\n  // hundred\n  doc.match(multiples).tag('#Multiple', here)\n\n  // half a penny\n  doc.match('[(half|quarter)] of? (a|an)', 0).tag('Fraction', 'millionth')\n  // nearly half\n  doc.match('#Adverb [half]', 0).tag('Fraction', 'nearly-half')\n  // half the\n  doc.match('[half] the', 0).tag('Fraction', 'half-the')\n  // two-halves\n  doc.match('#Value (halves|halfs|quarters)').tag('Fraction', 'two-halves')\n\n  // ---ordinals as fractions---\n  // a fifth\n  doc.match('a #Ordinal').tag('Fraction', 'a-quarter')\n  // seven fifths\n  doc.match('(#Fraction && /s$/)').lookBefore('#Cardinal+$').tag('Fraction')\n  // one third of ..\n  doc.match('[#Cardinal+ #Ordinal] of .', 0).tag('Fraction', 'ordinal-of')\n  // 100th of\n  doc.match('[(#NumericValue && #Ordinal)] of .', 0).tag('Fraction', 'num-ordinal-of')\n  // a twenty fifth\n  doc.match('(a|one) #Cardinal?+ #Ordinal').tag('Fraction', 'a-ordinal')\n  // doc.match('(a|one) [#Ordinal]', 0).tag('Fraction', 'a-ordinal')\n\n  // values.if('#Ordinal$').tag('Fraction', '4-fifths')\n  // seven quarters\n  // values.tag('Fraction', '4-quarters')\n\n  // doc.match('(#Value && !#Ordinal)+ (#Ordinal|#Fraction)').tag('Fraction', '4-fifths')\n  // 12 and seven fifths\n  // doc.match('#Value+ and #Value+ (#Ordinal|half|quarter|#Fraction)').tag('Fraction', 'val-and-ord')\n\n  // fixups\n  // doc.match('#Cardinal+? (second|seconds)').unTag('Fraction', '3 seconds')\n  // doc.match('#Ordinal (half|quarter)').unTag('Fraction', '2nd quarter')\n  // doc.match('#Ordinal #Ordinal+').unTag('Fraction')\n  // doc.match('[#Cardinal+? (second|seconds)] of (a|an)', 0).tag('Fraction', here)\n  // doc.match(multiples).tag('#Multiple', here)\n\n  // //  '3 out of 5'\n  doc.match('#Cardinal+ out? of every? #Cardinal').tag('Fraction', here)\n  // // one and a half\n  // doc.match('#Cardinal and a (#Fraction && #Value)').tag('Fraction', here)\n  // fraction - 'a third of a slice'\n  // TODO:fixme\n  // m = doc.match(`[(#Cardinal|a) ${ordinals}] of (a|an|the)`, 0).tag('Fraction', 'ord-of')\n  // tag 'thirds' as a ordinal\n  // m.match('.$').tag('Ordinal', 'plural-ordinal')\n  return doc\n}\nmodule.exports = tagFractions\n","const tagMoney = function (doc) {\n  const here = 'money-tagger'\n  //one hundred and seven dollars\n  doc.match('#Money and #Money #Currency?').tag('Money', 'money-and-money')\n  // $5.032 is invalid money\n  doc\n    .match('#Money')\n    .not('#TextValue')\n    .match('/\\\\.[0-9]{3}$/')\n    .unTag('#Money', 'three-decimal money')\n  // cleanup currency false-positives\n  doc.ifNo('#Value').match('#Currency #Verb').unTag('Currency', 'no-currency')\n  // 6 dollars and 5 cents\n  doc.match('#Value #Currency [and] #Value (cents|ore|centavos|sens)', 0).tag('Money', here)\n  // maybe currencies\n  let m = doc.match('[<num>#Value] [<currency>(mark|rand|won|rub|ore)]')\n  m.group('num').tag('Money', here)\n  m.group('currency').tag('Currency', here)\n  return doc\n}\nmodule.exports = tagMoney\n","const tagFractions = require('./fractions')\nconst tagMoney = require('./money')\nconst here = 'number-tag'\n\n// improved tagging for numbers\nconst tagger = function (doc) {\n  // add #Money + #Currency tags\n  doc = tagMoney(doc)\n  //  in the 400s\n  doc.match('the [/[0-9]+s$/]').tag('#Plural', here)\n  //half a million\n  doc.match('half a? #Value').tag('Value', 'half-a-value') //(quarter not ready)\n  //five and a half\n  doc.match('#Value [and a (half|quarter)]', 0).tag(['TextValue', '#Fraction'], 'value-and-a-half')\n  // add #Fraction tags\n  doc = tagFractions(doc)\n  // two and two thirds\n  doc.match('#Cardinal and #Fraction #Fraction').tag('Value', here)\n}\nmodule.exports = tagger\n","module.exports = {\n  Fraction: {\n    isA: ['Value'],\n  },\n  Multiple: {\n    isA: 'Value',\n  },\n}\n","const currencies = require('./currencies')\n\nconst ambig = {\n  mark: true,\n  sucre: true,\n  leone: true,\n  afghani: true,\n  rand: true,\n  try: true,\n  mop: true,\n  won: true,\n  all: true,\n  rub: true,\n  eek: true,\n  sit: true,\n  bam: true,\n  npr: true,\n  leu: true,\n}\n\nlet lex = {\n  kronor: 'Currency',\n}\ncurrencies.forEach((o) => {\n  if (o.iso && !ambig[o.iso]) {\n    lex[o.iso] = ['Acronym', 'Currency']\n  }\n  let name = o.name\n  if (name && !ambig[name]) {\n    lex[name] = 'Currency'\n    lex[name + 's'] = 'Currency'\n  }\n  if (o.dem) {\n    let dem = o.dem\n    lex[`${dem} ${name}`] = 'Currency'\n    lex[`${dem} ${name}s`] = 'Currency'\n  }\n  if (o.sub) {\n    lex[o.sub] = 'Currency'\n  }\n})\n\nmodule.exports = lex\n","const findMoney = require('./money/find')\nconst findNumbers = require('./numbers/find')\nconst findFractions = require('./fractions/find')\nconst findPercentages = require('./percentage/find')\n\nconst numberMethods = require('./numbers/methods')\nconst percentageMethods = require('./percentage/methods')\nconst moneyMethods = require('./money/methods')\nconst fractionMethods = require('./fractions/methods')\n\nconst tagger = require('./tagger')\nconst tags = require('./tags')\nconst lexicon = require('./money/data/lexicon')\n\n/** adds .numbers() method */\nconst plugin = function (Doc, world) {\n  // add money words to our lexicon\n  world.addWords(lexicon)\n  // add tags to our tagset\n  world.addTags(tags)\n  // additional tagging before running the number-parser\n  world.postProcess(tagger)\n\n  /** a list of number values, and their units */\n  class Numbers extends Doc {}\n  Object.assign(Numbers.prototype, numberMethods)\n\n  /** a number and a currency */\n  class Money extends Numbers {}\n  Object.assign(Money.prototype, moneyMethods)\n\n  /**  */\n  class Fraction extends Numbers {}\n  Object.assign(Fraction.prototype, fractionMethods)\n\n  /**  */\n  class Percentage extends Numbers {}\n  Object.assign(Percentage.prototype, percentageMethods)\n\n  const docMethods = {\n    /** find all numbers and values */\n    numbers: function (n) {\n      let m = findNumbers(this, n)\n      return new Numbers(m.list, this, this.world)\n    },\n\n    /** return '4%' or 'four percent' etc*/\n    percentages: function (n) {\n      let m = findPercentages(this, n)\n      return new Percentage(m.list, this, this.world)\n    },\n\n    /** return '3 out of 5' or '3/5' etc**/\n    fractions: function (n) {\n      let m = findFractions(this, n)\n      return new Fraction(m.list, this, this.world)\n    },\n\n    /** number + currency pair */\n    money: function (n) {\n      let m = findMoney(this, n)\n      return new Money(m.list, this, this.world)\n    },\n  }\n  // aliases\n  docMethods.values = docMethods.numbers\n  docMethods.percents = docMethods.percentages\n\n  Object.assign(Doc.prototype, docMethods)\n\n  return Doc\n}\nmodule.exports = plugin\n"],"names":["findMoney","doc","n","res","match","forEach","m","lookAfter","found","concat","get","ones","tens","teens","findNumbers","has","splitAfter","splitOn","double","noMultiple","tensVal","multVal","terms","d","splitBefore","findFractions","filter","r","lookBehind","eq","findPercentages","findModifiers","str","mults","reg","mult","i","length","test","amount","replace","zeroth","first","second","third","fourth","fifth","sixth","seventh","eighth","ninth","zero","one","two","three","four","five","six","seven","eight","nine","tenth","eleventh","twelfth","thirteenth","fourteenth","fifteenth","sixteenth","seventeenth","eighteenth","nineteenth","ten","eleven","twelve","thirteen","fourteen","fifteen","sixteen","seventeen","eighteen","nineteen","twentieth","thirtieth","fortieth","fourtieth","fiftieth","sixtieth","seventieth","eightieth","ninetieth","twenty","thirty","forty","fourty","fifty","sixty","seventy","eighty","ninety","multiples","hundredth","thousandth","millionth","billionth","trillionth","quadrillionth","quintillionth","sextillionth","septillionth","hundred","thousand","million","billion","trillion","quadrillion","quintillion","sextillion","septillion","grand","isValid","w","words","hasOwnProperty","parseDecimals","arr","parseFloat","parseNumeric","improperFraction","casualForms","section_sum","obj","Object","keys","reduce","sum","k","parse","modifier","last_mult","isNegative","split","charAt","substr","slice","fm","num","denom","undefined","w2","endS","parseNumber","text","parseText","mapping","half","halve","quarter","slashForm","numerator","Number","denominator","nOutOfN","groups","den","nOrinalth","dem","replaceWith","oneNth","lookAhead","named","round","rounded","Math","parseFraction","clone","decimal","p","isFraction","suffix","prefix","hasComma","frPart","fraction","not","agreeUnits","agree","val","unit","nouns","toSingular","toPlural","numToString","String","toFixed","indexOf","b","Array","join","tens_mapping","ones_mapping","sequence","breakdown_magnitudes","working","have","a","howmany","floor","push","count","breakdown_hundred","handle_decimal","names","toString","decimals","to_text","abs","units","unit_name","s","numOrdinal","last","irregulars","textOrdinal","textValue","prefixes","$","suffixes","cm","km","symbols","isCurrency","usd","eur","jpy","gbp","cad","aud","chf","cny","hkd","nzd","kr","rub","prefixToText","toUpperCase","makeNumber","isText","isOrdinal","toText","toLocaleString","methods","json","options","normal","trim","number","cardinal","ordinal","textCardinal","isCardinal","toNumber","tag","toCardinal","t","termList","post","toOrdinal","isEqual","greaterThan","lessThan","between","min","max","set","add","subtract","increment","decrement","romanNumerals","numbers","normalize","keep","toNice","isBetween","minus","plus","equals","dec","full","textNumber","toFraction","name","iso","sub","sym","alias","sterling","plural","yuan","ore","kronor","pennies","currencies","o","isPenny","getNamedCurrency","find","getBySymbol","parseMoney","decimalEnd","demonym","currency","symbol","titleCase","txt","toLowerCase","moneyMethods","textFmt","start","end","toDecimal","lib","unTag","toPercentage","here","tagFractions","lookBefore","tagMoney","ifNo","group","tagger","Fraction","isA","Multiple","ambig","mark","sucre","leone","afghani","rand","mop","won","all","eek","sit","bam","npr","leu","lex","plugin","Doc","world","addWords","lexicon","addTags","tags","postProcess","Numbers","assign","prototype","numberMethods","Money","fractionMethods","Percentage","percentageMethods","docMethods","list","percentages","fractions","money","values","percents"],"mappings":"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"}