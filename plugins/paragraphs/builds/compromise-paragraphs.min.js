var t,e;t=this,e=function(){return{api:function(t){class Paragraphs{constructor(t){this.viewType="Paragraphs",this.views=t}get found(){return this.views.length>0}get length(){return this.views.length}json(){return function(t,e){let r=[];return t.forEach((t=>{r.push(t[e]())})),r}(this.views,"json")}text(t){return function(t,e){let r=[];return t.forEach((t=>{r+=e(t)})),r}(this.views,(e=>e.text(t)))}match(t){return function(t,e){let r=[];return t.forEach((t=>{let s=e(t);s.found&&(r=r.concat(s.ptrs))})),t[0].update(r)}(this.views,(e=>e.match(t)))}has(t){return this.views.some((e=>e.has(t)))}if(t){let e=this.views.filter((e=>e.has(t)));return this.update(e)}update(t){return new Paragraphs(t)}}t.prototype.paragraphs=function(){const t=/\n\n/;let e=[],r=[];this.all().forEach((s=>{let n=s.lastTerm();r.push(s.ptrs[0]),t.test(n.post())&&(e.push(r),r=[])})),r.length&&e.push(r);let s=e.map((t=>this.update(t)));return new Paragraphs(s)}}}},"object"==typeof exports&&"undefined"!=typeof module?module.exports={api:function(t){class Paragraphs{constructor(t){this.viewType="Paragraphs",this.views=t}get found(){return this.views.length>0}get length(){return this.views.length}json(){return function(t,e){let r=[];return t.forEach((t=>{r.push(t[e]())})),r}(this.views,"json")}text(t){return function(t,e){let r=[];return t.forEach((t=>{r+=e(t)})),r}(this.views,(e=>e.text(t)))}match(t){return function(t,e){let r=[];return t.forEach((t=>{let s=e(t);s.found&&(r=r.concat(s.ptrs))})),t[0].update(r)}(this.views,(e=>e.match(t)))}has(t){return this.views.some((e=>e.has(t)))}if(t){let e=this.views.filter((e=>e.has(t)));return this.update(e)}update(t){return new Paragraphs(t)}}t.prototype.paragraphs=function(){const t=/\n\n/;let e=[],r=[];this.all().forEach((s=>{let n=s.lastTerm();r.push(s.ptrs[0]),t.test(n.post())&&(e.push(r),r=[])})),r.length&&e.push(r);let s=e.map((t=>this.update(t)));return new Paragraphs(s)}}}:"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).compromiseParagraphs={api:function(t){class Paragraphs{constructor(t){this.viewType="Paragraphs",this.views=t}get found(){return this.views.length>0}get length(){return this.views.length}json(){return function(t,e){let r=[];return t.forEach((t=>{r.push(t[e]())})),r}(this.views,"json")}text(t){return function(t,e){let r=[];return t.forEach((t=>{r+=e(t)})),r}(this.views,(e=>e.text(t)))}match(t){return function(t,e){let r=[];return t.forEach((t=>{let s=e(t);s.found&&(r=r.concat(s.ptrs))})),t[0].update(r)}(this.views,(e=>e.match(t)))}has(t){return this.views.some((e=>e.has(t)))}if(t){let e=this.views.filter((e=>e.has(t)));return this.update(e)}update(t){return new Paragraphs(t)}}t.prototype.paragraphs=function(){const t=/\n\n/;let e=[],r=[];this.all().forEach((s=>{let n=s.lastTerm();r.push(s.ptrs[0]),t.test(n.post())&&(e.push(r),r=[])})),r.length&&e.push(r);let s=e.map((t=>this.update(t)));return new Paragraphs(s)}}};
